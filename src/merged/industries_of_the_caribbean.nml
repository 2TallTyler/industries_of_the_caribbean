grf {
	grfid: "TT20";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	url: string(STR_WEBSITE);
	version: 0;
	min_compatible_version: 0;
}

/* Disable base game industries */
disable_item(FEAT_INDUSTRIES);

/* Disable base game cargos */
disable_item(FEAT_CARGOS);

/* Increase base costs for funding industries to 32x the base cost. This gives us a greater range of possible purchase prices for funding industries.
 * Note that this also increase the cost to fund a town, so we also decrement that by the same factor to leave it unchanged. 
 */
basecost {
	PR_BUILD_INDUSTRY: 6;
	PR_BUILD_TOWN: -6;
}

/* Create an error if OpenTTD version is before 1.10.0 (required for increased cargo types at industries) */
if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

/* Create a non-tatal error if Improved Town Layouts is not loaded */
if (param["TT\03\01", 254] < 18) { error(ERROR, string(STR_ERROR_NO_ITL));}

/* Create an error if a conflicting industry replacement set is active - thanks to FIRS for much of this code */

if (grf_future_status("Meo\81")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "New Cargos"));}

if (grf_future_status("Meo\82")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "New Cargos Petrol + Tourists"));}

if (grf_future_status("\4D\65\6F\9D")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Houses"));}

if (grf_future_status("Meo\91")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Town Vector"));}

if (grf_future_status("Meo\92")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic Vector"));}

if (grf_future_status("\4D\65\6F\9F")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic vector II"));}

if (grf_future_status("Meo\93")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemical Vector"));}

if (grf_future_status("\4D\65\6F\9C")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemicals vector II"));}

if (grf_future_status("Meo\94")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Machinery Vector"));}

if (grf_future_status("Meo\95")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Wood Vector"));}

if (grf_future_status("Meo\96")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Construction Vector"));}

if (grf_future_status("Meo\97")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Agricultural Vector"));}

if (grf_future_status("Meo\98")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic for Arctic"));}

if (grf_future_status("Meo\99")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic for Tropic"));}

if (grf_future_status("Meo\9A")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Machinery for Tropic"));}

if (grf_future_status("Meo\9B")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Construction Vector by Pikkabird"));}

if (grf_future_status("Meo\9C")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemical Vector II"));}

if (grf_future_status("MCEe")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECSext"));}

if (grf_future_status("\4A\53\0A\70")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Industries Addon"));}

if (grf_future_status("SK\05\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\04")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\05")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("EX\01\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("EX\01\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("DD\06\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "UKRS Industries"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manual Industries"));}

if (grf_future_status("SLTU")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Tourist Set"));}

if (grf_future_status("SZ\13D")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Oil well decrease neutralizer"));}

if (grf_future_status("EH\01\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Experts hard industries"));}

if (grf_future_status("DD\06\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "UKRS Brick Chain"));}

if (grf_future_status("DD\06\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Pikka Basic Industries"));}

if (grf_future_status("mb\08\00")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "NewCargos by Michael Blunck"));}

if (grf_future_status("EELS")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Eels"));}

if (grf_future_status("EN\15\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Apollo Rocket Industry Set"));}

if (grf_future_status("\F1%\00\05")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 1"));}

if (grf_future_status("\F1%\00\06")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 2"));}

if (grf_future_status("\F1%\00\07")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 3"));}

if (grf_future_status("\F1%\00\08")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 4"));}

if (grf_future_status("MCF1")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIXES"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manual Industries II"));}

if (grf_future_status("McMi")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manpower Industries"));}

if (grf_future_status("\45\4E\31\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "North Korean Industry Set"));}

if (grf_future_status("\52\54\4E\41")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Representative UK Train Set - Extended"));}

if (grf_future_status("\44\44\01\10")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Town and Industry - Basic Industries"));}

if (grf_future_status("\41\4C\01\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "station's name from nearby industries"));}

if (grf_future_status("\6A\54\72\83")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wannaroo Basic Industries"));}

if (grf_future_status("\6A\64\72\04")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wannaroo Extra Industries"));}

if (grf_future_status("\56\45\03\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "YETI Extended Towns and Industries"));}

if (grf_future_status("\4E\4D\11\13")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "North American Industry Set (NAIS)"));}

if (grf_future_status("\4A\44\88\07")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "XIS Extreme Industry Set"));}

if (grf_future_status("AZ\20\77")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wasteland"));}

if (grf_future_status("GGQT")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "One Tile Industry Set"));}

if (grf_future_status("TT\04\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Improved Town Industries"));}


/* Begin Functions */

/**
 * Check if an industry is within a range of elevation.
 * @param min_z elevation (inclusive)
 * @param max_z elevation (inclusive)
 * @return 1 if the industry is at or between the specified min and max elevations, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IndustryElevationCheck, min_z, max_z, nearby_tile_height(0,0) >= min_z && nearby_tile_height(0,0) <= max_z) {return;}

/**
 * Check if a water-based industry is near land, or a land-based industry is near water
 * @param required distance from land/water
 * @return 1 if the industry is greater than the given distance from land/water, else 0
 */
switch (FEAT_INDUSTRIES, SELF, DistanceFromWaterOrLand, required, water_distance >= required) {return;}

/**
 * Calculate the x coordinate of an industry's northernmost tile.
 * @returns the x coordinate
 */ 
switch (FEAT_INDUSTRIES, SELF, GetTileX, var[0x80, 0, 0xFFFFFFFF] % map_x_edge) {return;}

/**
 * Calculate the y coordinate of an industry's northernmost tile.
 * @returns the y coordinate
 */
switch (FEAT_INDUSTRIES, SELF, GetTileY, var[0x80, 0, 0xFFFFFFFF] / map_x_edge) {return;}
 
/**
 * Checks if an industry is suitably close to the edge of the map
 * @returns 1 if it is close enouugh, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IsNearMapEdge, 
	(GetTileX() < 4) ||
	((map_x_edge - GetTileX()) < 8) ||
	(GetTileY() < 4) ||
	((map_y_edge - GetTileY()) < 8)
) {return;}

/**
 * Checks if an industry is being funded 
 * @returns 1 if so, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IsFundedConstruction, extra_callback_info2 == IND_CREATION_FUND) {return;}

/**
 * Hides the cargo waiting text for the selected cargo number
 * @returns a special string which hides the cargo waiting text for the proper cargo number, else does nothing
 */
 switch (FEAT_INDUSTRIES, SELF, HideCargoWaitingText, cargonum, getbits(extra_callback_info2, 0, 8) == cargonum) {
	1: return 0x3800 + string(STR_EMPTY); // per FIRS source, hides the cargo waiting text
	return CB_RESULT_NO_TEXT;
}

/* Empty production block */
produce (produce_none, [], [])

/* Consume idle workers (no cargo available to process */ 
produce (produce_idle_workers, [PASS: 1;], [], 1)

switch (FEAT_INDUSTRIES, SELF, switch_produce_idle, incoming_cargo_waiting("PASS") > 0) {
	1: produce_idle_workers;
	produce_none;
}

/* Begin Cargos */

cargotable {
	/* Town/passenger cargos */
	PASS, MAIL, TOUR,
	
	/* Primary products */
	JAVA, FRUT, SGCN, TBCO, WOOD, OIL_, NKOR,
	
	/* Secondary products */
	SUGR, MOLS, CIGR, BEER, FOOD, CHEM, RFPR, FUEL, NICK, COBL, PIPE,
	
	/* Boost Supplies */
	FERT, ENSP
}

// Replace passengers, keep original ID. Use cargo label "PASS" to avoid breaking vehicle refits.
item (FEAT_CARGOS, cargo_workers, 0x00) {
	property {
		number:						0x00;
		sprite:						4297;
		type_name:					string(STR_CARGO_NAME_WORKERS);
		unit_name:					string(STR_CARGO_SINGULAR_WORKERS);
		type_abbreviation:			string(STR_CARGO_ABBREV_WORKERS);
		weight:						0.0625;
		is_freight:					0;
		cargo_classes:				bitmask(CC_PASSENGERS);
		cargo_label:				"PASS";
		town_growth_effect:			TOWNGROWTH_PASSENGERS;
		town_growth_multiplier:		1.0;
		units_of_cargo:				string(STR_CARGO_QUANTITY_WORKERS);
		items_of_cargo:				string(STR_CARGO_QUANTITY_WORKERS);
		penalty_lowerbound:			10;
		single_penalty_length:		24;
		price_factor:				105;
		capacity_multiplier:		4;
		station_list_colour:		152;
		cargo_payment_list_colour:	152;
	}
}

// Uses Coal ID
item (FEAT_CARGOS, cargo_tourists, 0x01) {
	property {
		number:						0x01;
		sprite:						4297;
		type_name:					string(STR_CARGO_NAME_TOURISTS);
		unit_name:					string(STR_CARGO_SINGULAR_TOURISTS);
		type_abbreviation:			string(STR_CARGO_ABBREV_TOURISTS);
		weight:						0.0625;
		is_freight:					0;
		cargo_classes:				bitmask(CC_PASSENGERS);
		cargo_label:				"TOUR";
		town_growth_effect:			TOWNGROWTH_WATER;
		town_growth_multiplier:		1.0;
		units_of_cargo:				string(STR_CARGO_QUANTITY_TOURISTS);
		items_of_cargo:				string(STR_CARGO_QUANTITY_TOURISTS);
		penalty_lowerbound:			10;
		single_penalty_length:		24;
		price_factor:				175;
		capacity_multiplier:		4;
		station_list_colour:		176;
		cargo_payment_list_colour:	176;
	}
}

// Original ID, required for house compatibility.
item (FEAT_CARGOS, cargo_mail, 0x02) {
	property {
		number:						0x02;
		sprite:						4299;
		type_name:					TTD_STR_CARGO_PLURAL_MAIL;
		unit_name:					TTD_STR_CARGO_SINGULAR_MAIL;
		type_abbreviation:			TTD_STR_ABBREV_MAIL;
		weight:						0.25;
		is_freight:					0;
		cargo_classes:				bitmask(CC_MAIL);
		cargo_label:				"MAIL";
		town_growth_effect:			TOWNGROWTH_MAIL;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_BAGS;
		items_of_cargo:				TTD_STR_QUANTITY_MAIL;
		penalty_lowerbound:			6;
		single_penalty_length:		24;
		price_factor:				167;
		capacity_multiplier:		2;
		station_list_colour:		23;
		cargo_payment_list_colour:	23;	
	}
}

// Uses Oil ID
item (FEAT_CARGOS, cargo_coffee, 0x03) {
	property {
		number:						0x03;
		sprite:						4308;
		type_name:					string(STR_CARGO_NAME_COFFEE);
		unit_name:					string(STR_CARGO_NAME_COFFEE);
		type_abbreviation:			string(STR_CARGO_ABBREV_COFFEE);
		weight:						0.25;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS);
		cargo_label:				"JAVA";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_COFFEE);
		penalty_lowerbound:			16;
		single_penalty_length:		64;
		capacity_multiplier:		1;
		price_factor:				173;
		station_list_colour:		63;
		cargo_payment_list_colour:	63;
	}
}

// Uses Livestock ID
item (FEAT_CARGOS, cargo_fruit, 0x04) {
	property {
		number:						0x04;
		sprite:						4308;
		type_name:					TTD_STR_CARGO_PLURAL_FRUIT;
		unit_name:					TTD_STR_CARGO_SINGULAR_FRUIT;
		type_abbreviation:			TTD_STR_ABBREV_FRUIT;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
		cargo_label:				"FRUT";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_FRUIT;
		penalty_lowerbound:			16;
		single_penalty_length:		64;
		capacity_multiplier:		1;
		price_factor:				124;
		station_list_colour:		188;
		cargo_payment_list_colour:	188;
	}
}

// Rum uses Goods ID for cargo acceptance with old houses. ITL houses do not accept rum -- it must be exported.
item (FEAT_CARGOS, cargo_rum, 0x05) {
	property {
		number:						0x05;
		sprite:						4317;
		type_name:					string(STR_CARGO_NAME_RUM);
		unit_name:					string(STR_CARGO_NAME_RUM);
		type_abbreviation:			string(STR_CARGO_ABBREV_RUM);
		weight:						0.5;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS);
		cargo_label:				"BEER";
		town_growth_effect:			TOWNGROWTH_WATER;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_RUM);
		penalty_lowerbound:			9;
		single_penalty_length:		36;
		price_factor:				166;
		capacity_multiplier:		1;
		station_list_colour:		61;
		cargo_payment_list_colour:	61;
	}
}

// Sugarcane in 0x06 Grain
item (FEAT_CARGOS, cargo_sugarcane, 0x06) {
	property {
		number:						0x06;
		sprite:						4309;
		type_name:					string(STR_CARGO_NAME_SUGARCANE);
		unit_name:					string(STR_CARGO_NAME_SUGARCANE);
		type_abbreviation:			string(STR_CARGO_ABBREV_SUGARCANE);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK, CC_NON_POURABLE);
		cargo_label:				"SGCN";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_SUGARCANE);
		penalty_lowerbound:			5;
		single_penalty_length:		30;
		price_factor:				99;
		capacity_multiplier:		1;
		station_list_colour:		94;
		cargo_payment_list_colour:	94;
	}
}

// Sugar in 0x07 Wood
item (FEAT_CARGOS, cargo_sugar, 0x07) {
	property {
		number:						0x07;
		sprite:						4316;
		type_name:					TTD_STR_CARGO_PLURAL_SUGAR;
		unit_name:					TTD_STR_CARGO_SINGULAR_SUGAR;
		type_abbreviation:			TTD_STR_ABBREV_SUGAR;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK, CC_COVERED);
		cargo_label:				"SUGR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_SUGAR;
		penalty_lowerbound:			16;
		single_penalty_length:		64;
		price_factor:				102;
		capacity_multiplier:		1;
		station_list_colour:		15;
		cargo_payment_list_colour:	15;
	}
}

// Tobacco in 0x08 Iron Ore
item (FEAT_CARGOS, cargo_tobacco, 0x08) {
	property {
		number:						0x08;
		sprite:						4309;
		type_name:					string(STR_CARGO_NAME_TOBACCO);
		unit_name:					string(STR_CARGO_NAME_TOBACCO);
		type_abbreviation:			string(STR_CARGO_ABBREV_TOBACCO);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK, CC_NON_POURABLE);
		cargo_label:				"TBCO";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		items_of_cargo:				string(STR_CARGO_QUANTITY_TOBACCO);
		units_of_cargo:				TTD_STR_TONS;
		penalty_lowerbound:			5;
		single_penalty_length:		30;
		price_factor:				116;
		capacity_multiplier:		1;
		station_list_colour:		57;
		cargo_payment_list_colour:	57;
	}
}

// Molasses in 0x0A Diamonds
item (FEAT_CARGOS, cargo_molasses, 0x0A) {
	property {
		number:						0x0A;
		sprite:						4300;
		type_name:					string(STR_CARGO_NAME_MOLASSES);
		unit_name:					string(STR_CARGO_NAME_MOLASSES);
		type_abbreviation:			string(STR_CARGO_ABBREV_MOLASSES);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"MOLS";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_MOLASSES);
		penalty_lowerbound:			40;
		single_penalty_length:		255;
		price_factor:				96;
		capacity_multiplier:		1;
		station_list_colour:		106;
		cargo_payment_list_colour:	106;
	}
}

// Cigars in 0x0B Paper
item (FEAT_CARGOS, cargo_cigars, 0x0B) {
	property {
		number:						0x0B;
		sprite:						4317;
		type_name:					string(STR_CARGO_NAME_CIGARS);
		unit_name:					string(STR_CARGO_NAME_CIGARS);
		type_abbreviation:			string(STR_CARGO_ABBREV_CIGARS);
		weight:						0.5;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS);
		cargo_label:				"CIGR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_CIGARS);
		penalty_lowerbound:			10;
		single_penalty_length:		56;
		price_factor:				163;
		capacity_multiplier:		1;
		station_list_colour:		36;
		cargo_payment_list_colour:	36;
	}
}

// Original ID, required for compatibility with older NewGRF house sets which hard-code cargo acceptance to cargo IDs rather than "FOOD"
item (FEAT_CARGOS, cargo_food, 0x0C) {
	property {
		number:						0x0C;
		sprite:						4312;
		type_name:					TTD_STR_CARGO_PLURAL_FOOD;
		unit_name:					TTD_STR_CARGO_SINGULAR_FOOD;
		type_abbreviation:			TTD_STR_ABBREV_FOOD;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_REFRIGERATED, CC_EXPRESS);
		cargo_label:				"FOOD";
		town_growth_effect:			TOWNGROWTH_FOOD;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_FOOD;
		penalty_lowerbound:			0;
		single_penalty_length:		24;
		price_factor:				158;
		capacity_multiplier:		1;
		station_list_colour:		48;
		cargo_payment_list_colour:	48;
	}
}

// Oil in 0X0D Fruit
item (FEAT_CARGOS, cargo_oil, 0x0D) {
	property {
		number:						0x0D;
		sprite:						4300;
		type_name:					TTD_STR_CARGO_PLURAL_OIL;
		unit_name:					TTD_STR_CARGO_SINGULAR_OIL;
		type_abbreviation:			TTD_STR_ABBREV_OIL;
		weight:						0.9;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"OIL_";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_TONS;
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		station_list_colour:		171;
		cargo_payment_list_colour:	171;
		price_factor:				101;
		capacity_multiplier:		1;		
	}
}

// Fuel in 0x0E Copper Ore
item (FEAT_CARGOS, cargo_fuel, 0x0E) {
	property {
		number:						0x0E;
		sprite:						4300;
		type_name:					string(STR_CARGO_NAME_FUEL);
		unit_name:					string(STR_CARGO_NAME_FUEL);
		type_abbreviation:			string(STR_CARGO_ABBREV_FUEL);
		weight:						0.8;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"FUEL";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_FUEL);
		penalty_lowerbound:			32;
		single_penalty_length:		44;
		price_factor:				120;
		capacity_multiplier:		1;
		station_list_colour:		173;
		cargo_payment_list_colour:	173;
	}
}

// Chemicals in 0x0F Water
item (FEAT_CARGOS, cargo_chemicals, 0x0F) {
	property {
		number:						0x0F;
		sprite:						4314;
		type_name:					string(STR_CARGO_NAME_CHEMICALS);
		unit_name:					string(STR_CARGO_NAME_CHEMICALS);
		type_abbreviation:			string(STR_CARGO_ABBREV_CHEMICALS);
		weight:						1.2;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID, CC_POWDERIZED);
		cargo_label:				"RFPR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_CHEMICALS);
		penalty_lowerbound:			20;
		single_penalty_length:		255;
		price_factor:				115;
		capacity_multiplier:		1;
		station_list_colour:		175;
		cargo_payment_list_colour:	175;		
	}
}

// Pipe in 0x10 Rubber
item (FEAT_CARGOS, cargo_pipe, 0x10) {
	property {
		number:						0x10;
		sprite:						4306;
		type_name:					string(STR_CARGO_NAME_PIPE);
		unit_name:					string(STR_CARGO_NAME_PIPE);
		type_abbreviation:			string(STR_CARGO_ABBREV_PIPE);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"PIPE";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_PIPE);
		penalty_lowerbound:			30;
		single_penalty_length:		42;
		price_factor:				144;
		capacity_multiplier:		1;
		station_list_colour:		132;
		cargo_payment_list_colour:	132;
	}
}

// Nickel Ore in 0x11 Sugar
item (FEAT_CARGOS, cargo_nickel_ore, 0x11) {
	property {
		number:						0x11;
		sprite:						4298;
		type_name:					string(STR_CARGO_NAME_NICKEL_ORE);
		unit_name:					string(STR_CARGO_NAME_NICKEL_ORE);
		type_abbreviation:			string(STR_CARGO_ABBREV_NICKEL_ORE);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK);
		cargo_label:				"NKOR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_NICKEL_ORE);
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		price_factor:				89;
		capacity_multiplier:		1;
		station_list_colour:		8;
		cargo_payment_list_colour:	8;
	}
}

// Nickel in 0x12 Toys
item (FEAT_CARGOS, cargo_nickel, 0x12) {
	property {
		number:						0x12;
		sprite:						4306;
		type_name:					string(STR_CARGO_NAME_NICKEL);
		unit_name:					string(STR_CARGO_NAME_NICKEL);
		type_abbreviation:			string(STR_CARGO_ABBREV_NICKEL);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"NICK";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_NICKEL);
		penalty_lowerbound:			15;
		single_penalty_length:		255;
		price_factor:				141;
		capacity_multiplier:		1;
		station_list_colour:		11;
		cargo_payment_list_colour:	11;
	}
}

// Cobalt in 0x13 Batteries
item (FEAT_CARGOS, cargo_cobalt, 0x13) {
	property {
		number:						0x13;
		sprite:						4311;
		type_name:					string(STR_CARGO_NAME_COBALT);
		unit_name:					string(STR_CARGO_NAME_COBALT);
		type_abbreviation:			string(STR_CARGO_ABBREV_COBALT);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"COBL";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_COBALT);
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		price_factor:				162;
		capacity_multiplier:		1;
		station_list_colour:		158;
		cargo_payment_list_colour:	158;
	}
}

// Fertilizer in 0x14 Sweets
item (FEAT_CARGOS, cargo_fertilizer, 0x14) {
	property {
		number:						0x14;
		sprite:						4320;
		type_name:					string(STR_CARGO_NAME_FERTILIZER);
		unit_name:					string(STR_CARGO_NAME_FERTILIZER);
		type_abbreviation:			string(STR_CARGO_ABBREV_FERTILIZER);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS, CC_BULK, CC_COVERED);
		cargo_label:				"FERT";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_FERTILIZER);
		penalty_lowerbound:			22;
		single_penalty_length:		44;
		price_factor:				123;
		capacity_multiplier:		1;
		station_list_colour:		118;
		cargo_payment_list_colour:	118;
	}
}

// Machinery in 0x15 Toffee
item (FEAT_CARGOS, cargo_machinery, 0x15) {
	property {
		number:						0x15;
		sprite:						4302;
		type_name:					string(STR_CARGO_NAME_MACHINERY);
		unit_name:					string(STR_CARGO_NAME_MACHINERY);
		type_abbreviation:			string(STR_CARGO_ABBREV_MACHINERY);
		weight:						0.65;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS);
		cargo_label:				"ENSP";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_MACHINERY);
		penalty_lowerbound:			2;
		single_penalty_length:		32;
		price_factor:				172;
		capacity_multiplier:		1;
		station_list_colour:		165;
		cargo_payment_list_colour:	165;
	}
}

/* Begin Beach */

spriteset(spriteset_beach, "src/gfx/beach-tiles.png") {

    //SLOPE_SW	
    //left_x, upper_y, width, height, offset_x, offset_y
    [ 0,      0,       64,    26,     -31,        -3]
    [ 0,     40,       64,    23,     -31,         0]
    [ 0,     80,       64,    23,     -31,         0]

    //SLOPE_SE	
    //left_x, upper_y, width, height, offset_x, offset_y
    [ 65,     0,       64,    26,     -31,        -3]
    [ 65,    40,       64,    23,     -31,         0]
    [ 65,    80,       64,    23,     -31,         0]

    //SLOPE_NW	
    //left_x, upper_y, width, height, offset_x, offset_y
    [ 130,    0,       64,    39,     -31,        -8]
    [ 130,   40,       64,    39,     -31,        -8]
    [ 130,   80,       64,    39,     -31,        -8]

    //SLOPE_NE	
    //left_x, upper_y, width, height, offset_x, offset_y
    [ 195,    0,       64,    39,     -31,        -8]
    [ 195,   40,       64,    39,     -31,        -8]
    [ 195,   80,       64,    39,     -31,        -8]
}

spritelayout beach_sprite_SW_1 {
	ground {sprite: 3927 ;}
	building {
		sprite:	spriteset_beach(0);
	}
}

spritelayout beach_sprite_SW_2 {
	ground {sprite: 3927 ;}
	building {
		sprite:	spriteset_beach(1);
	}
}

spritelayout beach_sprite_SW_3 {
	ground {sprite: 3927 ;}
	building {
		sprite:	spriteset_beach(2);
	}
}

spritelayout beach_sprite_SE_1 {
	ground {sprite: 3930 ;}
	building {
		sprite:	spriteset_beach(3);
	}
}

spritelayout beach_sprite_SE_2 {
	ground {sprite: 3930 ;}
	building {
		sprite:	spriteset_beach(4);
	}
}

spritelayout beach_sprite_SE_3 {
	ground {sprite: 3930 ;}
	building {
		sprite:	spriteset_beach(5);
	}
}

spritelayout beach_sprite_NW_1 {
	ground {sprite: 3933 ;}
	building {
		sprite:	spriteset_beach(6);
	}
}

spritelayout beach_sprite_NW_2 {
	ground {sprite: 3933 ;}
	building {
		sprite:	spriteset_beach(7);
	}
}

spritelayout beach_sprite_NW_3 {
	ground {sprite: 3933 ;}
	building {
		sprite:	spriteset_beach(8);
	}
}

spritelayout beach_sprite_NE_1 {
	ground {
		sprite: 3936;
	}
	building {
		sprite:	spriteset_beach(9);
	}
}

spritelayout beach_sprite_NE_2 {
	ground {
		sprite: 3936;
	}
	building {
		sprite:	spriteset_beach(10);
	}
}

spritelayout beach_sprite_NE_3 {
	ground {
		sprite: 3936;
	}
	building {
		sprite:	spriteset_beach(11);
	}
}


/* Location Checks */

switch(FEAT_INDUSTRYTILES, SELF, beach_ocean_check, nearby_tile_water_class(0,0) == WATER_CLASS_SEA) { 1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW; }
switch(FEAT_INDUSTRYTILES, SELF, beach_slope_NE_check, nearby_tile_slope(0,0) == SLOPE_NE) { 0: return CB_RESULT_LOCATION_DISALLOW; beach_ocean_check; }
switch(FEAT_INDUSTRYTILES, SELF, beach_slope_SE_check, nearby_tile_slope(0,0) == SLOPE_SE) { 0: return CB_RESULT_LOCATION_DISALLOW; beach_ocean_check; }
switch(FEAT_INDUSTRYTILES, SELF, beach_slope_NW_check, nearby_tile_slope(0,0) == SLOPE_NW) { 0: return CB_RESULT_LOCATION_DISALLOW; beach_ocean_check; }
switch(FEAT_INDUSTRYTILES, SELF, beach_slope_SW_check, nearby_tile_slope(0,0) == SLOPE_SW) { 0: return CB_RESULT_LOCATION_DISALLOW; beach_ocean_check; }

/* Industry Tile Layouts */

tilelayout beach_layout_NE_1 {
	0, 0: beach_tile_NE_1;
	0, 1: beach_tile_NE_2;
	0, 2: beach_tile_NE_3;
}

tilelayout beach_layout_NE_2 {
	0, 0: beach_tile_NE_2;
	0, 1: beach_tile_NE_3;
	0, 2: beach_tile_NE_2;
}

tilelayout beach_layout_NE_3 {
	0, 0: beach_tile_NE_2;
	0, 1: beach_tile_NE_3;
}

tilelayout beach_layout_SE_1 {
	0, 0: beach_tile_SE_3;
	1, 0: beach_tile_SE_2;
	2, 0: beach_tile_SE_1;
}

tilelayout beach_layout_SE_2 {
	0, 0: beach_tile_SE_3;
	1, 0: beach_tile_SE_1;
	2, 0: beach_tile_SE_2;
}

tilelayout beach_layout_SE_3 {
	0, 0: beach_tile_SE_3;
	1, 0: beach_tile_SE_2;
}

tilelayout beach_layout_NW_1 {
	0, 0: beach_tile_NW_1;
	1, 0: beach_tile_NW_2;
	2, 0: beach_tile_NW_3;
}

tilelayout beach_layout_NW_2 {
	0, 0: beach_tile_NW_3;
	1, 0: beach_tile_NW_2;
	2, 0: beach_tile_NW_3;
}

tilelayout beach_layout_NW_3 {
	1, 0: beach_tile_NW_2;
	2, 0: beach_tile_NW_1;
}

tilelayout beach_layout_SW_1 {
	0, 0: beach_tile_SW_1;
	0, 1: beach_tile_SW_2;
	0, 2: beach_tile_SW_3;
}

tilelayout beach_layout_SW_2 {
	0, 0: beach_tile_SW_2;
	0, 1: beach_tile_SW_1;
	0, 2: beach_tile_SW_3;
}

tilelayout beach_layout_SW_3 {
	0, 0: beach_tile_SW_3;
	0, 1: beach_tile_SW_2;
}

/* Tile Definitions */

// NE Tiles

item(FEAT_INDUSTRYTILES, beach_tile_NE_1) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_NE_1;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_NE_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_NE_2) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_NE_2;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_NE_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_NE_3) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_NE_3;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_NE_check;
	}
}

// SE Tiles

item(FEAT_INDUSTRYTILES, beach_tile_SE_1) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_SE_1;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_SE_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_SE_2) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_SE_2;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_SE_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_SE_3) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_SE_3;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_SE_check;
	}
}

// NW tiles

item(FEAT_INDUSTRYTILES, beach_tile_NW_1) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_NW_1;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_NW_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_NW_2) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_NW_2;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_NW_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_NW_3) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_NW_3;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_NW_check;
	}
}

// SW tiles

item(FEAT_INDUSTRYTILES, beach_tile_SW_1) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_SW_1;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_SW_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_SW_2) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_SW_2;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_SW_check;
	}
}

item(FEAT_INDUSTRYTILES, beach_tile_SW_3) {
	property {
		substitute: 02;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: beach_sprite_SW_3;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check: beach_slope_SW_check;
	}
}

item(FEAT_INDUSTRIES, industry_beach, 15) {
	property {
		substitute: 0;
		life_type: IND_LIFE_TYPE_BLACK_HOLE;
		cargo_types:
			[
				accept_cargo("TOUR"),
				accept_cargo("FOOD")
			];
		name: string(STR_BEACH);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_BEACH));
		prob_map_gen: 2;
		prob_in_game: 1; // FIXME: Check this later
		fund_cost_multiplier: 5;
		map_colour: 176;
		spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER, IND_FLAG_BUILT_NEAR_TOWN);		
		layouts: [
			beach_layout_NE_1,
			beach_layout_NE_2,
			beach_layout_NE_3,
			beach_layout_SE_1,
			beach_layout_SE_2,
			beach_layout_SE_3,
			beach_layout_NW_1,
			beach_layout_NW_2,
			beach_layout_NW_3,
			beach_layout_SW_1,
			beach_layout_SW_2,
			beach_layout_SW_3,
			];
	}
	graphics {
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}
/* Begin Cigar Factory */

item (FEAT_INDUSTRYTILES, tile_cigar_factory_0)
{
	property {
		substitute: 43;
		override: 43;
		accepted_cargos: [[TBCO, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_cigar_factory_1)
{
	property {
		substitute: 44;
		override: 44;
		accepted_cargos: [[TBCO, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_cigar_factory_2)
{
	property {
		substitute: 45;
		override: 45;
		accepted_cargos: [[TBCO, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_cigar_factory_3)
{
	property {
		substitute: 46;
		override: 46;
		accepted_cargos: [[TBCO, 8], [PASS, 8]];
	}
}

produce (produce_cigar_factory,
	[PASS: 1; TBCO: 1;],	// Consume
	[CIGR: 1;],				// Produce
	1 						// Run callback again
	)
	
switch (FEAT_INDUSTRIES, SELF, switch_produce_cigar_factory, (incoming_cargo_waiting("PASS") > 0 && incoming_cargo_waiting("TBCO") > 0)) {
	1: produce_cigar_factory;
	switch_produce_idle;
}

item (FEAT_INDUSTRIES, industry_cigar_factory, 13)
{
	property {
		substitute: INDUSTRYTYPE_PRINTING_WORKS;
		name: string(STR_CIGAR_FACTORY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_CIGAR_FACTORY));
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("TBCO"),
			produce_cargo("CIGR", 0)
		];
		prob_map_gen: 0;
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 36;
	}
	graphics {
		produce_cargo_arrival: switch_produce_cigar_factory;
		cargo_subtype_display: HideCargoWaitingText(0);
		extra_text_industry: string(STR_CIGAR_FACTORY_HELPTEXT);
		colour: founder_colour1;
	}
}

/* Begin Citrus Grove */

spritelayout citrus_grove_office_1 {
	ground {
		sprite: 2116;
	}
	building {
		sprite: 4450;
	}
}

spritelayout citrus_grove_office_2 {
	ground {
		sprite: 2116;
	}
	building {
		sprite: 4456;
	}
}

random_switch (FEAT_INDUSTRYTILES, SELF, random_citrus_grove_office) {
	1: return citrus_grove_office_1;
	1: return citrus_grove_office_2;
}

item (FEAT_INDUSTRYTILES, ind_tile_citrus_grove) {
	property {
		substitute:				116;
		land_shape_flags:		bitmask(LSF_ONLY_ON_FLAT_LAND);
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_citrus_grove_office) {
	property {
		substitute: 117;
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: random_citrus_grove_office;
	}
}

tilelayout tilelayout_citrus_grove_1 {
	0,0: ind_tile_citrus_grove;	0,1: ind_tile_citrus_grove;	0,2: ind_tile_citrus_grove;		0,4: ind_tile_citrus_grove;	0,5: ind_tile_citrus_grove;	0,6: ind_tile_citrus_grove;
	1,0: ind_tile_citrus_grove;	1,1: ind_tile_citrus_grove;	1,2: ind_tile_citrus_grove;		1,4: ind_tile_citrus_grove;	1,5: ind_tile_citrus_grove;	1,6: ind_tile_citrus_grove;
	2,0: ind_tile_citrus_grove;	2,1: ind_tile_citrus_grove;	2,2: ind_tile_citrus_grove;		2,4: ind_tile_citrus_grove;	2,5: ind_tile_citrus_grove;	2,6: ind_tile_citrus_grove;
	3,0: ind_tile_citrus_grove;	3,1: ind_tile_citrus_grove;	3,2: ind_tile_citrus_grove;		3,4: ind_tile_citrus_grove;	3,5: ind_tile_citrus_grove;	3,6: ind_tile_citrus_grove;
	4,0: ind_tile_citrus_grove;	4,1: ind_tile_citrus_grove;	4,2: ind_tile_citrus_grove;		4,4: ind_tile_citrus_grove;	4,5: ind_tile_citrus_grove;	4,6: ind_tile_citrus_grove;
	5,0: ind_tile_citrus_grove;	5,1: ind_tile_citrus_grove;	5,2: ind_tile_citrus_grove;		5,4: ind_tile_citrus_grove;	5,5: ind_tile_citrus_grove;	5,6: ind_tile_citrus_grove;
								6,1: ind_tile_citrus_grove_office;
}

tilelayout tilelayout_citrus_grove_2 {
	0,0: ind_tile_citrus_grove;	0,1: ind_tile_citrus_grove;	0,2: ind_tile_citrus_grove;		0,4: ind_tile_citrus_grove;	0,5: ind_tile_citrus_grove;	0,6: ind_tile_citrus_grove;
	1,0: ind_tile_citrus_grove;	1,1: ind_tile_citrus_grove;	1,2: ind_tile_citrus_grove;		1,4: ind_tile_citrus_grove;	1,5: ind_tile_citrus_grove;	1,6: ind_tile_citrus_grove;
	2,0: ind_tile_citrus_grove;	2,1: ind_tile_citrus_grove;	2,2: ind_tile_citrus_grove;		2,4: ind_tile_citrus_grove;	2,5: ind_tile_citrus_grove;	2,6: ind_tile_citrus_grove;
	3,0: ind_tile_citrus_grove;	3,1: ind_tile_citrus_grove;	3,2: ind_tile_citrus_grove;		3,4: ind_tile_citrus_grove;	3,5: ind_tile_citrus_grove;	3,6: ind_tile_citrus_grove;
	4,0: ind_tile_citrus_grove;	4,1: ind_tile_citrus_grove;	4,2: ind_tile_citrus_grove;		4,4: ind_tile_citrus_grove;	4,5: ind_tile_citrus_grove;	4,6: ind_tile_citrus_grove;
	5,0: ind_tile_citrus_grove;	5,1: ind_tile_citrus_grove;	5,2: ind_tile_citrus_grove;		5,4: ind_tile_citrus_grove;	5,5: ind_tile_citrus_grove;	5,6: ind_tile_citrus_grove;
																							6,4: ind_tile_citrus_grove_office;
}

tilelayout tilelayout_citrus_grove_3 {
	0,0: ind_tile_citrus_grove;	0,1: ind_tile_citrus_grove;	0,2: ind_tile_citrus_grove;		0,4: ind_tile_citrus_grove;	0,5: ind_tile_citrus_grove;	0,6: ind_tile_citrus_grove;
	1,0: ind_tile_citrus_grove;	1,1: ind_tile_citrus_grove;	1,2: ind_tile_citrus_grove;		1,4: ind_tile_citrus_grove;	1,5: ind_tile_citrus_grove;	1,6: ind_tile_citrus_grove;
	2,0: ind_tile_citrus_grove;	2,1: ind_tile_citrus_grove;	2,2: ind_tile_citrus_grove;		2,4: ind_tile_citrus_grove;	2,5: ind_tile_citrus_grove;	2,6: ind_tile_citrus_grove; 2,7: ind_tile_citrus_grove_office;
	3,0: ind_tile_citrus_grove;	3,1: ind_tile_citrus_grove;	3,2: ind_tile_citrus_grove;		3,4: ind_tile_citrus_grove;	3,5: ind_tile_citrus_grove;	3,6: ind_tile_citrus_grove;
	4,0: ind_tile_citrus_grove;	4,1: ind_tile_citrus_grove;	4,2: ind_tile_citrus_grove;		4,4: ind_tile_citrus_grove;	4,5: ind_tile_citrus_grove;	4,6: ind_tile_citrus_grove;
	5,0: ind_tile_citrus_grove;	5,1: ind_tile_citrus_grove;	5,2: ind_tile_citrus_grove;		5,4: ind_tile_citrus_grove;	5,5: ind_tile_citrus_grove;	5,6: ind_tile_citrus_grove;
}

tilelayout tilelayout_citrus_grove_4 {
	0,0: ind_tile_citrus_grove;	0,1: ind_tile_citrus_grove;	0,2: ind_tile_citrus_grove;	0,3: ind_tile_citrus_grove;
	1,0: ind_tile_citrus_grove;	1,1: ind_tile_citrus_grove;	1,2: ind_tile_citrus_grove;	1,3: ind_tile_citrus_grove;
	2,0: ind_tile_citrus_grove;	2,1: ind_tile_citrus_grove;	2,2: ind_tile_citrus_grove;	2,3: ind_tile_citrus_grove;
	3,0: ind_tile_citrus_grove;	3,1: ind_tile_citrus_grove;	3,2: ind_tile_citrus_grove;	3,3: ind_tile_citrus_grove;
	4,0: ind_tile_citrus_grove;	4,1: ind_tile_citrus_grove;	4,2: ind_tile_citrus_grove;	4,3: ind_tile_citrus_grove;
	5,0: ind_tile_citrus_grove;	5,1: ind_tile_citrus_grove;	5,2: ind_tile_citrus_grove;	5,3: ind_tile_citrus_grove;
								6,1: ind_tile_citrus_grove_office;
}

tilelayout tilelayout_citrus_grove_5 {
	0,0: ind_tile_citrus_grove;	0,1: ind_tile_citrus_grove;	0,2: ind_tile_citrus_grove;	0,3: ind_tile_citrus_grove;
	1,0: ind_tile_citrus_grove;	1,1: ind_tile_citrus_grove;	1,2: ind_tile_citrus_grove;	1,3: ind_tile_citrus_grove;
	2,0: ind_tile_citrus_grove;	2,1: ind_tile_citrus_grove;	2,2: ind_tile_citrus_grove;	2,3: ind_tile_citrus_grove; 2,4: ind_tile_citrus_grove_office;
	3,0: ind_tile_citrus_grove;	3,1: ind_tile_citrus_grove;	3,2: ind_tile_citrus_grove;	3,3: ind_tile_citrus_grove;
	4,0: ind_tile_citrus_grove;	4,1: ind_tile_citrus_grove;	4,2: ind_tile_citrus_grove;	4,3: ind_tile_citrus_grove;
	5,0: ind_tile_citrus_grove;	5,1: ind_tile_citrus_grove;	5,2: ind_tile_citrus_grove;	5,3: ind_tile_citrus_grove;
}

tilelayout tilelayout_citrus_grove_6 {
	0,0: ind_tile_citrus_grove;	0,1: ind_tile_citrus_grove;	0,2: ind_tile_citrus_grove;	0,3: ind_tile_citrus_grove;
	1,0: ind_tile_citrus_grove;	1,1: ind_tile_citrus_grove;	1,2: ind_tile_citrus_grove;	1,3: ind_tile_citrus_grove;
	2,0: ind_tile_citrus_grove;	2,1: ind_tile_citrus_grove;	2,2: ind_tile_citrus_grove;	2,3: ind_tile_citrus_grove;
	3,0: ind_tile_citrus_grove;	3,1: ind_tile_citrus_grove;	3,2: ind_tile_citrus_grove;	3,3: ind_tile_citrus_grove;
	4,0: ind_tile_citrus_grove;	4,1: ind_tile_citrus_grove;	4,2: ind_tile_citrus_grove;	4,3: ind_tile_citrus_grove; 4,4: ind_tile_citrus_grove_office;
	5,0: ind_tile_citrus_grove;	5,1: ind_tile_citrus_grove;	5,2: ind_tile_citrus_grove;	5,3: ind_tile_citrus_grove;
}

/* Citrus groves only generate at elevation 1. */
switch (FEAT_INDUSTRIES, SELF, loc_check_citrus_grove, IndustryElevationCheck(0, 1)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_CITRUS_LOCATION);}

/* Boosted production if Fertilizier is supplied */
produce (produce_citrus_grove_boosted,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3); FERT: 3;],	// Consume
	[FRUT: 16;],													// Produce
	0 																// Don't run callback again
	)

/* Regular production uses at least 24 passengers/month, but will consume excess passengers so they don't build up */
produce (produce_citrus_grove,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3);],	// Consume
	[FRUT: 8;],												// Produce
	0 														// Don't run callback again
	)

/* Check for Fertilizier for normal or boosted production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_citrus_grove_boosted, incoming_cargo_waiting("FERT") >= 3) {1: produce_citrus_grove_boosted; produce_citrus_grove;}

/* Check for Workers for any production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_citrus_grove, incoming_cargo_waiting("PASS") >= 3) {1: switch_produce_citrus_grove_boosted; produce_none;}

item (FEAT_INDUSTRIES, industry_citrus_grove, 1)
{
	property {
		substitute: INDUSTRYTYPE_FRUIT_PLANTATION;
		name: string(STR_CITRUS_GROVE);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_CITRUS_GROVE));
		life_type: IND_LIFE_TYPE_ORGANIC;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("FERT"),
			produce_cargo("FRUT", 0),
		];
		layouts: [
			tilelayout_citrus_grove_1,
			tilelayout_citrus_grove_2,
			tilelayout_citrus_grove_3,
			tilelayout_citrus_grove_4,
			tilelayout_citrus_grove_5,
			tilelayout_citrus_grove_6
		];
		conflicting_ind_types: [industry_citrus_grove, industry_sugarcane_plantation]; // FIXME: Add plantations which plant fields around them
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 188;
		prospect_chance: 1;
		
	}
	graphics {
		produce_256_ticks: switch_produce_citrus_grove;
		cargo_subtype_display: HideCargoWaitingText(0);
		location_check: loc_check_citrus_grove;
		/* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_PRIMARY_HELPTEXT);
	}
}


/* Begin Coffee Plantation */

spritelayout coffee_plantation_office_1 {
	ground {
		sprite: 2116;
	}
	building {
		sprite: 4450;
	}
}

spritelayout coffee_plantation_office_2 {
	ground {
		sprite: 2116;
	}
	building {
		sprite: 4456;
	}
}

random_switch (FEAT_INDUSTRYTILES, SELF, random_coffee_plantation_office) {
	1: return coffee_plantation_office_1;
	1: return coffee_plantation_office_2;
}

item (FEAT_INDUSTRYTILES, ind_tile_coffee_plantation) {
	property {
		substitute: 117;
		override: 117;
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_coffee_plantation_office) {
	property {
		substitute: 117;
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: random_coffee_plantation_office;
	}
}

tilelayout tilelayout_coffee_plantation_1 {
	0,0: ind_tile_coffee_plantation;	0,1: ind_tile_coffee_plantation;	0,2: ind_tile_coffee_plantation;	0,3: ind_tile_coffee_plantation;
	1,0: ind_tile_coffee_plantation;	1,1: ind_tile_coffee_plantation;	1,2: ind_tile_coffee_plantation;	1,3: ind_tile_coffee_plantation;
	2,0: ind_tile_coffee_plantation;	2,1: ind_tile_coffee_plantation;	2,2: ind_tile_coffee_plantation;	2,3: ind_tile_coffee_plantation;
										3,1: ind_tile_coffee_plantation_office;
}

tilelayout tilelayout_coffee_plantation_2 {
	0,0: ind_tile_coffee_plantation;	0,1: ind_tile_coffee_plantation;	0,2: ind_tile_coffee_plantation;	0,3: ind_tile_coffee_plantation;
	1,0: ind_tile_coffee_plantation;	1,1: ind_tile_coffee_plantation;	1,2: ind_tile_coffee_plantation;	1,3: ind_tile_coffee_plantation;	1,4: ind_tile_coffee_plantation_office;
	2,0: ind_tile_coffee_plantation;	2,1: ind_tile_coffee_plantation;	2,2: ind_tile_coffee_plantation;	2,3: ind_tile_coffee_plantation;
}

tilelayout tilelayout_coffee_plantation_3 {
	0,0: ind_tile_coffee_plantation;	0,1: ind_tile_coffee_plantation;	0,2: ind_tile_coffee_plantation;	0,3: ind_tile_coffee_plantation_office;
	1,0: ind_tile_coffee_plantation;	1,1: ind_tile_coffee_plantation;	1,2: ind_tile_coffee_plantation;
	2,0: ind_tile_coffee_plantation;	2,1: ind_tile_coffee_plantation;	2,2: ind_tile_coffee_plantation;
	3,0: ind_tile_coffee_plantation;	3,1: ind_tile_coffee_plantation;	3,2: ind_tile_coffee_plantation;
}

tilelayout tilelayout_coffee_plantation_4 {
	0,0: ind_tile_coffee_plantation;	0,1: ind_tile_coffee_plantation;	0,2: ind_tile_coffee_plantation;
	1,0: ind_tile_coffee_plantation;	1,1: ind_tile_coffee_plantation;	1,2: ind_tile_coffee_plantation;
	2,0: ind_tile_coffee_plantation;	2,1: ind_tile_coffee_plantation;	2,2: ind_tile_coffee_plantation;
	3,0: ind_tile_coffee_plantation;	3,1: ind_tile_coffee_plantation;	3,2: ind_tile_coffee_plantation;	3,3: ind_tile_coffee_plantation_office;
}

/* Coffee plantations must be at least height 2, no max limit. */
switch (FEAT_INDUSTRIES, SELF, loc_check_coffee_plantation, IndustryElevationCheck(2, 255)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_COFFEE_LOCATION);}

/* Boosted production if Fertilizier is supplied */
produce (produce_coffee_plantation_boosted,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3); FERT: 3;],	// Consume
	[JAVA: 8;],													// Produce
	0 																// Don't run callback again
	)

/* Regular production uses at least 24 passengers/month, but will consume excess passengers so they don't build up */
produce (produce_coffee_plantation,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3);],	// Consume
	[JAVA: 4;],												// Produce
	0 														// Don't run callback again
	)

/* Check for Fertilizier for normal or boosted production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_coffee_plantation_boosted, incoming_cargo_waiting("FERT") >= 3) {1: produce_coffee_plantation_boosted; produce_coffee_plantation;}

/* Check for Workers for any production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_coffee_plantation, incoming_cargo_waiting("PASS") >= 3) {1: switch_produce_coffee_plantation_boosted; produce_none;}

item (FEAT_INDUSTRIES, industry_coffee_plantation, 0)
{
	property {
		substitute: INDUSTRYTYPE_RUBBER_PLANTATION;
		name: string(STR_COFFEE_PLANTATION);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_COFFEE_PLANTATION));
		life_type: IND_LIFE_TYPE_ORGANIC;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("FERT"),
			produce_cargo("JAVA", 0),
		];
		layouts: [
			tilelayout_coffee_plantation_1,
			tilelayout_coffee_plantation_2,
			tilelayout_coffee_plantation_3,
			tilelayout_coffee_plantation_4
		];
		conflicting_ind_types: [industry_coffee_plantation, industry_sugarcane_plantation]; // FIXME: Add plantations which plant fields around them
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 63;
		prospect_chance: 1;
		
	}
	graphics {
		produce_256_ticks: switch_produce_coffee_plantation;
		cargo_subtype_display: HideCargoWaitingText(0);
		location_check: loc_check_coffee_plantation;
		/* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_PRIMARY_HELPTEXT);
	}
}

/* Begin Hotel */

spritelayout sprite_hotel_n {
	ground {
		sprite: 1420;
	}
	building {
		sprite: construction_state==0 ? 4471 : construction_state==3 ? 4475 : 4473;
	}
}

spritelayout sprite_hotel_e {
	ground {
		sprite: 1420;
	}
	building {
		sprite: construction_state==0 ? 4472 : construction_state==3 ? 4476 : 4474;
	}
}

item (FEAT_INDUSTRYTILES, tile_hotel_n)
{
	property {
		substitute: 0;
		accepted_cargos: [[TOUR, 8], [FOOD, 8]];
	}
	graphics {
		default: sprite_hotel_n;
	}
}

item (FEAT_INDUSTRYTILES, tile_hotel_e)
{
	property {
		substitute: 0;
		accepted_cargos: [[TOUR, 8], [FOOD, 8]];
	}
	graphics {
		default: sprite_hotel_e;
	}
}

tilelayout tilelayout_hotel_square {
	0,0: tile_hotel_n;	0,1: tile_hotel_e;
	1,0: tile_hotel_n;	1,1: tile_hotel_e;
}

item (FEAT_INDUSTRIES, industry_hotel, 14)
{
	property {
		substitute: INDUSTRYTYPE_POWER_PLANT;
		name: string(STR_HOTEL);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_HOTEL));
		life_type: IND_LIFE_TYPE_BLACK_HOLE;
		spec_flags: bitmask(IND_FLAG_ONLY_IN_LARGE_TOWNS, IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION);
		layouts: [
			tilelayout_hotel_square,
		];
		cargo_types: [
			accept_cargo("TOUR"),
			accept_cargo("FOOD")
		];
		prob_map_gen: 1; // FIXME: Balance this later
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 176;
	}
	graphics {
		extra_text_industry: string(STR_HOTEL_HELPTEXT);
	}
}

/* Begin Import/Export */

spritelayout sprlay_import_export_buoy {
	ground {
		sprite: 4061;
	}
	building {
		sprite: 4790;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_import_export_buoy) {
	property {
		substitute: 0;
		land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: sprlay_import_export_buoy;
	}
}

tilelayout tilelayout_import_export {
	0,0: 24;
	0,1: 24;
	1,0: 24;
	1,1: ind_tile_import_export_buoy;
}

switch (FEAT_INDUSTRIES, SELF, loc_check_import_export_0,
	IsNearMapEdge() && 
	((DistanceFromWaterOrLand(8) && industry_distance(industry_import_export_0) > 512) || IsFundedConstruction())
) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_IMPORT_EXPORT_LOCATION);}

switch (FEAT_INDUSTRIES, SELF, loc_check_import_export_1,
	IsNearMapEdge() && 
	((DistanceFromWaterOrLand(8) && industry_distance(industry_import_export_1) > 512) || IsFundedConstruction())
) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_IMPORT_EXPORT_LOCATION);}

switch (FEAT_INDUSTRIES, SELF, loc_check_import_export_2,
	IsNearMapEdge() && 
	((DistanceFromWaterOrLand(8) && industry_distance(industry_import_export_2) > 512) || IsFundedConstruction())
) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_IMPORT_EXPORT_LOCATION);}

switch (FEAT_INDUSTRIES, SELF, loc_check_import_export_3,
	IsNearMapEdge() && 
	((DistanceFromWaterOrLand(8) && industry_distance(industry_import_export_3) > 512) || IsFundedConstruction())
) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_IMPORT_EXPORT_LOCATION);}

item (FEAT_INDUSTRIES, industry_import_export_0, 8) {
	property {
		substitute: 9;
		name: string(STR_IMPORT_EXPORT_0);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IMPORT_EXPORT_0));
		life_type: IND_LIFE_TYPE_BLACK_HOLE;
		spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER, IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES);
		cargo_types: [
			accept_cargo("JAVA", produce_cargo("FOOD", 0.75), produce_cargo("ENSP", 0.25)),
			accept_cargo("FRUT", produce_cargo("FOOD", 0.75), produce_cargo("ENSP", 0.25))
		];
		layouts: [
			tilelayout_import_export
		];
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 15;
		prospect_chance: 1;
		fund_cost_multiplier: 0;
	}
	graphics {
		location_check: loc_check_import_export_0;
	}
}

item (FEAT_INDUSTRIES, industry_import_export_1, 2) {
	property {
		substitute: 9;
		name: string(STR_IMPORT_EXPORT_1);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IMPORT_EXPORT_1));
		life_type: IND_LIFE_TYPE_BLACK_HOLE;
		spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER, IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES);
		cargo_types: [
			accept_cargo("SUGR", produce_cargo("OIL_", 0.75), produce_cargo("PIPE", 0.25)) // FIXME: Why doesn't Oil show up on the industry window?
		];
		layouts: [
			tilelayout_import_export
		];
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 15;
		prospect_chance: 1;
		fund_cost_multiplier: 0;
	}
	graphics {
		location_check: loc_check_import_export_1;
	}
}

item (FEAT_INDUSTRIES, industry_import_export_2, 9) {
	property {
		substitute: 9;
		name: string(STR_IMPORT_EXPORT_2);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IMPORT_EXPORT_2));
		life_type: IND_LIFE_TYPE_BLACK_HOLE;
		spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER, IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES);
		cargo_types: [
			accept_cargo("BEER", produce_cargo("TOUR", 1)),
			accept_cargo("CIGR", produce_cargo("TOUR", 1)),
			accept_cargo("COBL", produce_cargo("TOUR", 1)),
		];
		layouts: [
			tilelayout_import_export
		];
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 15;
		prospect_chance: 1;
		fund_cost_multiplier: 0;
	}
	graphics {
		location_check: loc_check_import_export_2;
	}
}

item (FEAT_INDUSTRIES, industry_import_export_3, 10) {
	property {
		substitute: 9;
		name: string(STR_IMPORT_EXPORT_3);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IMPORT_EXPORT_3));
		life_type: IND_LIFE_TYPE_BLACK_HOLE;
		spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER, IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES);
		cargo_types: [
			accept_cargo("NICK", produce_cargo("FERT", 1))
		];
		layouts: [
			tilelayout_import_export
		];
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 15;
		prospect_chance: 1;
		fund_cost_multiplier: 0;
	}
	graphics {
		location_check: loc_check_import_export_3;
	}
}

/* Begin Nickel Mine */

item (FEAT_INDUSTRYTILES, tile_nickel_mine_0)
{
	property {
		substitute: 47;
		override: 47;
		accepted_cargos: [[FUEL, 8], [ENSP, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_mine_1)
{
	property {
		substitute: 48;
		override: 48;
		accepted_cargos: [[FUEL, 8], [ENSP, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_mine_2)
{
	property {
		substitute: 49;
		override: 49;
		accepted_cargos: [[FUEL, 8], [ENSP, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_mine_3)
{
	property {
		substitute: 50;
		override: 50;
		accepted_cargos: [[FUEL, 8], [ENSP, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_mine_4)
{
	property {
		substitute: 51;
		override: 51;
		accepted_cargos: [[FUEL, 8], [ENSP, 8], [PASS, 8]];
	}
}
/* FIXME: Should this industry be unlocked and spawn by itself, be prospected by the player, or appear at map generation? */
//switch (FEAT_INDUSTRIES, SELF, switch_unlock_nickel_mine, (getbits(extra_callback_info2, 0, 8) != IND_CREATION_GENERATION) && industry_count(industry_oil_refinery, -1) > 0) {1: return 1; return 0;}

/* Nickel Mines must be at least height 2, no max limit. */
switch (FEAT_INDUSTRIES, SELF, loc_check_nickel_mine, IndustryElevationCheck(2, 255)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_NICKEL_MINE_LOCATION);}

/* Boosted production: 48 Workers, 48 units of Fuel, and 48 units of Machinery. Extra workers are consumed so they don't build up */
produce (produce_nickel_mine_boosted,
	[FUEL: 6; PASS: max((incoming_cargo_waiting("PASS") / 8), 6); ENSP: 6;],	// Consume
	[NKOR: 40; COBL: 10;],														// Produce
	0 																			// Don't run callback again
	)

/* Regular production: 48 Workers and 48 units of Fuel. Extra workers are consumed so they don't build up */
produce (produce_nickel_mine,
	[FUEL: 6; PASS: max((incoming_cargo_waiting("PASS") / 8), 6);],	// Consume
	[NKOR: 20; COBL: 5;],											// Produce
	0 																// Don't run callback again
	)

switch (FEAT_INDUSTRIES, SELF, switch_produce_nickel_mine_boosted, incoming_cargo_waiting("ENSP") >= 6) {1: produce_nickel_mine_boosted; produce_nickel_mine;}	


/* Check for Workers for any production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_nickel_mine, (incoming_cargo_waiting("FUEL") >= 6 && incoming_cargo_waiting("PASS") >= 6)) {1: switch_produce_nickel_mine_boosted; produce_none;}

item (FEAT_INDUSTRIES, industry_nickel_mine, 6)
{
	property {
		substitute: INDUSTRYTYPE_COPPER_ORE_MINE;
		name: string(STR_NICKEL_MINE);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NICKEL_MINE));
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("FUEL"),
			accept_cargo("ENSP"),
			produce_cargo("NKOR", 0), // 3
			produce_cargo("COBL", 0)  // 1
		];
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 8;
	}
	graphics {
		produce_256_ticks: switch_produce_nickel_mine;
		cargo_subtype_display: HideCargoWaitingText(0);
		location_check: loc_check_nickel_mine;
		//construction_probability: switch_unlock_nickel_mine;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_NICKEL_MINE_HELPTEXT);
	}
}
/* Begin Nickel Smelter */

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_0)
{
	property {
		substitute: 64;
		override: 64;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_1)
{
	property {
		substitute: 65;
		override: 65;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_2)
{
	property {
		substitute: 66;
		override: 66;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_3)
{
	property {
		substitute: 67;
		override: 67;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_4)
{
	property {
		substitute: 68;
		override: 68;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_5)
{
	property {
		substitute: 69;
		override: 69;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_6)
{
	property {
		substitute: 70;
		override: 70;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_7)
{
	property {
		substitute: 71;
		override: 71;
		accepted_cargos: [[NKOR, 8], [RFPR, 8], [PASS, 8]];
	}
}

produce (produce_nickel_smelter,
	[PASS: 9; NKOR: 9; RFPR: 1;],	// Consume
	[NICK: 9;],						// Produce
	1 								// Run callback again
	)
	
switch (FEAT_INDUSTRIES, SELF, switch_produce_nickel_smelter, (incoming_cargo_waiting("PASS") > 0 && incoming_cargo_waiting("NKOR") >= 10 && incoming_cargo_waiting("RFPR") > 0)) {
	1: produce_nickel_smelter;
	switch_produce_idle;
}

item (FEAT_INDUSTRIES, industry_nickel_smelter, 7)
{
	property {
		substitute: INDUSTRYTYPE_PAPER_MILL;
		name: string(STR_NICKEL_SMELTER);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NICKEL_SMELTER));
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("NKOR"),
			accept_cargo("RFPR"),
			produce_cargo("NICK", 0)
		];
		prob_map_gen: 0;
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 11;
	}
	graphics {
		produce_cargo_arrival: switch_produce_nickel_smelter;
		cargo_subtype_display: HideCargoWaitingText(0);
		extra_text_industry: string(STR_NICKEL_SMELTER_HELPTEXT);
		colour: founder_colour1;
	}
}
/* Begin Oil Refinery */


spritelayout sprlay_oil_refinery_1 { // Office
	ground		{sprite:1420;}
	building	{sprite:2095; yoffset:2; xoffset:2;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_2 { // Large tank
	ground		{sprite:1420;}
	building	{sprite:2080; yoffset:1; xoffset:1;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_3 { // Tall tank
	ground		{sprite:1420;}
	building	{sprite:2083; yoffset:4; xoffset:4;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_4 { // Burner tower
	ground		{sprite:1420;}
	building	{sprite:2086; yoffset:5; xoffset:5;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_5 { // Pipe frame red
	ground		{sprite:1420;}
	building	{sprite:2089;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_6 { // Pipe frame 2
	ground		{sprite:1420;}
	building	{sprite:2092;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_7 { // Pipe frame 3
	ground		{sprite:1420;}
	building	{sprite:2091;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_8 { // Bare ground
	ground		{sprite:1420;}
}
spritelayout sprlay_oil_refinery_9 { // Food silo
	ground		{sprite:1420;}
	building	{sprite:2196;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_oil_refinery_10 { // Pumps with boxes
	ground		{sprite:1420;}
	building	{sprite:2349;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_oil_refinery_11 { // Pumps with reflector
	ground		{sprite:1420;}
	building	{sprite:2352;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_1) { // Office
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_1;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_2) { // Large tank
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_2;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_3) { // Tall tank
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_3;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_4) { // Burner tower
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_4;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_5) { // Pipe frame red
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_5;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_6) { // Pipe frame 2
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_6;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_7) { // Pipe frame 3
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_7;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_8) { // Bare ground
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_8;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_9) { // Food silo
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_9;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_10) { // Pumps with boxes
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_10;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_11) { // Pump with reflector
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		accepted_cargos: 		[[PASS, 8]];
	}
	graphics {default:			sprlay_oil_refinery_11;}
}

tilelayout industry_layout_oil_refinery_1 {
0,0:	ind_tile_oil_refinery_2;	0,1:	ind_tile_oil_refinery_10;	0,2: 	ind_tile_oil_refinery_5;	0,3:	ind_tile_oil_refinery_6;	0,4:	ind_tile_oil_refinery_7;
1,0:	ind_tile_oil_refinery_2;	1,1:	ind_tile_oil_refinery_1;	1,2:	ind_tile_oil_refinery_5;	1,3:	ind_tile_oil_refinery_6;	1,4:	ind_tile_oil_refinery_7;

3,0:	ind_tile_oil_refinery_3;	3,1:	ind_tile_oil_refinery_6;	3,2:	ind_tile_oil_refinery_4;	3,3:	ind_tile_oil_refinery_11;	3,4:	ind_tile_oil_refinery_10;
4,0:	ind_tile_oil_refinery_3;	4,1:	ind_tile_oil_refinery_5;	4,2:	ind_tile_oil_refinery_7;	4,3:	ind_tile_oil_refinery_11;	4,4:	ind_tile_oil_refinery_10;

6,0:	ind_tile_oil_refinery_2;	6,1:	ind_tile_oil_refinery_2;	6,2:	ind_tile_oil_refinery_2;	6,3:	ind_tile_oil_refinery_2;	6,4:	ind_tile_oil_refinery_1;
7,0:	ind_tile_oil_refinery_2;	7,1:	ind_tile_oil_refinery_2;	7,2:	ind_tile_oil_refinery_2;	7,3:	ind_tile_oil_refinery_2;	7,4:	ind_tile_oil_refinery_2;
}

tilelayout industry_layout_oil_refinery_2 {
0,0:	ind_tile_oil_refinery_5;	0,1:	ind_tile_oil_refinery_2;	0,2:	ind_tile_oil_refinery_10;	0,3:	ind_tile_oil_refinery_11;	0,4:	ind_tile_oil_refinery_6;
1,0:	ind_tile_oil_refinery_5;	1,1:	ind_tile_oil_refinery_2;	1,2:	ind_tile_oil_refinery_1;	1,3:	ind_tile_oil_refinery_8;	1,4:	ind_tile_oil_refinery_3;
2,0:	ind_tile_oil_refinery_5;	2,1:	ind_tile_oil_refinery_4;	2,2:	ind_tile_oil_refinery_7;	2,3:	ind_tile_oil_refinery_8;	2,4:	ind_tile_oil_refinery_9;
3,0:	ind_tile_oil_refinery_3;	3,1:	ind_tile_oil_refinery_6;	3,2:	ind_tile_oil_refinery_1;	3,3:	ind_tile_oil_refinery_2;	3,4:	ind_tile_oil_refinery_2;
4,0:	ind_tile_oil_refinery_9;	4,1:	ind_tile_oil_refinery_8;	4,2:	ind_tile_oil_refinery_11;	4,3:	ind_tile_oil_refinery_2;	4,4:	ind_tile_oil_refinery_2;
}

tilelayout industry_layout_oil_refinery_3 {
0,0:	ind_tile_oil_refinery_2;	0,1:	ind_tile_oil_refinery_2;						0,3:	ind_tile_oil_refinery_3;	0,4:	ind_tile_oil_refinery_1;
1,0:	ind_tile_oil_refinery_2;	1,1:	ind_tile_oil_refinery_2;						1,3:	ind_tile_oil_refinery_1;	1,4:	ind_tile_oil_refinery_4;
2,0:	ind_tile_oil_refinery_7;															2,3:	ind_tile_oil_refinery_5;	2,4:	ind_tile_oil_refinery_7;
3,0:	ind_tile_oil_refinery_11;															3,3:	ind_tile_oil_refinery_5;	3,4:	ind_tile_oil_refinery_2;	3,5:	ind_tile_oil_refinery_2;
4,0:	ind_tile_oil_refinery_2;	4,1:	ind_tile_oil_refinery_2;						4,3:	ind_tile_oil_refinery_11;	4,4:	ind_tile_oil_refinery_10;	4,5:	ind_tile_oil_refinery_9;
5,0:	ind_tile_oil_refinery_2;	5,1:	ind_tile_oil_refinery_2;						5,3:	ind_tile_oil_refinery_9;	5,4:	ind_tile_oil_refinery_3;	5,5:	ind_tile_oil_refinery_7;
}

produce (produce_oil_refinery,
	[PASS: 4; OIL_: 4;],	// Consume
	[FUEL: 3; RFPR: 1;],	// Produce
	1 						// Run callback again
	)
	
switch (FEAT_INDUSTRIES, SELF, switch_produce_oil_refinery, (incoming_cargo_waiting("PASS") > 0 && incoming_cargo_waiting("OIL_") >= 4)) {
	1: produce_oil_refinery;
	switch_produce_idle;
}

item (FEAT_INDUSTRIES, industry_oil_refinery, 5)
{
	property {
		substitute: INDUSTRYTYPE_OIL_REFINERY;
		name: string(STR_OIL_REFINERY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_OIL_REFINERY));
		life_type: IND_LIFE_TYPE_PROCESSING;
		layouts:				[
			industry_layout_oil_refinery_1,
			industry_layout_oil_refinery_2,
			industry_layout_oil_refinery_3,
		];
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("OIL_"),
			produce_cargo("RFPR", 0),
			produce_cargo("FUEL", 0)
		];
		prob_map_gen: 0;
		prob_in_game: 0;
		fund_cost_multiplier: 10;
		map_colour: 173;
	}
	graphics {
		produce_cargo_arrival: switch_produce_oil_refinery;
		cargo_subtype_display: HideCargoWaitingText(0);
		extra_text_industry: string(STR_OIL_REFINERY_HELPTEXT);
		colour: founder_colour1;
	}
}
/* Begin Nickel Mine */


spritelayout sprlay_oil_wells_1_a { 
	ground		{sprite:2116;}
	building	{sprite:2174;}
}
spritelayout sprlay_oil_wells_1_b { 
	ground		{sprite:2116;}
	building	{sprite:2175;}
}
spritelayout sprlay_oil_wells_1_c { 
	ground		{sprite:2116;}
	building	{sprite:2176;}
}
spritelayout sprlay_oil_wells_1_d { 
	ground		{sprite:2116;}
	building	{sprite:2177;}
}
spritelayout sprlay_oil_wells_1_e { 
	ground		{sprite:2116;}
	building	{sprite:2178;}
}
spritelayout sprlay_oil_wells_1_f { 
	ground		{sprite:2116;}
	building	{sprite:2179;}
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_animation, animation_frame) {
	1:	sprlay_oil_wells_1_a;
	2:	sprlay_oil_wells_1_b;
	3:	sprlay_oil_wells_1_c;
	4:	sprlay_oil_wells_1_d;
	5:	sprlay_oil_wells_1_e;
	6:	sprlay_oil_wells_1_f;
	7:	sprlay_oil_wells_1_e;
	8:	sprlay_oil_wells_1_d;
	9:	sprlay_oil_wells_1_c;
	10:	sprlay_oil_wells_1_b;
	11:	sprlay_oil_wells_1_a;
	12:	sprlay_oil_wells_1_b;
	13:	sprlay_oil_wells_1_c;
	14:	sprlay_oil_wells_1_d;
	15:	sprlay_oil_wells_1_e;
	16:	sprlay_oil_wells_1_f;
	17:	sprlay_oil_wells_1_e;
	18:	sprlay_oil_wells_1_d;
	19:	sprlay_oil_wells_1_c;
	20:	sprlay_oil_wells_1_b;
	sprlay_oil_wells_1_a;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_stop_anim, animation_frame) {
	1: return 11; // jump to the 'stop animation cycle' when triggered and currently animated
	2: return 12;
	3: return 13;
	4: return 14;
	5: return 15;
	6: return 16;
	7: return 17;
	8: return 18;
	9: return 19;
	10: return 20;
	return CB_RESULT_DO_NOTHING;
}
switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_start_anim, animation_frame) {
	11: return 1;
	12: return 2;
	13: return 3;
	14: return 4;
	15: return 5;
	16: return 6;
	17: return 7;
	18: return 8;
	19: return 9;
	20: return 10;
	return CB_RESULT_START_ANIMATION;
}

random_switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_random_anim_trigger_switch, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
	1: return oil_wells_tile_1_stop_anim;
	1: return oil_wells_tile_1_start_anim;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_next_frame_switch, animation_frame) {
	10: return 1;
	11: return CB_RESULT_STOP_ANIMATION; // Don't actually stop animation, just keep looping the same frame over and over. // CB_RESULT_STOP_ANIMATION
	20: return 11;
	return CB_RESULT_NEXT_FRAME;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_graphics_switch, construction_state) {
	1: sprlay_oil_wells_1_a;
	2: sprlay_oil_wells_1_a;
	oil_wells_tile_animation;
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_wells) {
	property {
		substitute:				02; 
		animation_info:			[ANIMATION_LOOPING, 20];
		animation_speed:		3;
		animation_triggers:		bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP);
		special_flags:			bitmask(INDTILE_FLAG_RANDOM_ANIMATION, INDTILE_FLAG_ACCEPT_ALL);
		land_shape_flags:		bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
	graphics {
		anim_control: oil_wells_tile_1_random_anim_trigger_switch;
		anim_next_frame: oil_wells_tile_1_next_frame_switch;
		random_trigger: oil_wells_tile_1_random_anim_trigger_switch;
			oil_wells_tile_1_graphics_switch;
	}
}

tilelayout industry_layout_oil_wells_1 {
	0,0:	ind_tile_oil_wells;		0,2:	ind_tile_oil_wells;		0,4:	ind_tile_oil_wells;
	2,0:	ind_tile_oil_wells;		2,2:	ind_tile_oil_wells;		2,4:	ind_tile_oil_wells;
}

tilelayout industry_layout_oil_wells_2 {
	0,0:	ind_tile_oil_wells;		0,2:	ind_tile_oil_wells;	
	2,0:	ind_tile_oil_wells;		2,2:	ind_tile_oil_wells;
	4,0:	ind_tile_oil_wells;		4,2:	ind_tile_oil_wells;
}

/* FIXME: Should this industry be unlocked and spawn by itself, be prospected by the player, or appear at map generation? */
//switch (FEAT_INDUSTRIES, SELF, switch_unlock_oil_wells, (getbits(extra_callback_info2, 0, 8) != IND_CREATION_GENERATION) && industry_count(industry_oil_refinery, -1) > 0) {1: return 1; return 0;}

/* Boosted production: 48 Workers, 48 units of Pipe, and 48 units of Machinery. Extra workers are consumed so they don't build up */
produce (produce_oil_wells_boosted,
	[PIPE: 6; PASS: max((incoming_cargo_waiting("PASS") / 8), 6); ENSP: 6;],	// Consume
	[NKOR: 40; COBL: 10;],														// Produce
	0 																			// Don't run callback again
	)

/* Regular production: 48 Workers and 48 units of Pipe. Extra workers are consumed so they don't build up */
produce (produce_oil_wells,
	[PIPE: 6; PASS: max((incoming_cargo_waiting("PASS") / 8), 6);],	// Consume
	[NKOR: 20; COBL: 5;],											// Produce
	0 																// Don't run callback again
	)

switch (FEAT_INDUSTRIES, SELF, switch_produce_oil_wells_boosted, incoming_cargo_waiting("ENSP") >= 6) {1: produce_oil_wells_boosted; produce_oil_wells;}	


/* Check for Workers for any production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_oil_wells, (incoming_cargo_waiting("PIPE") >= 6 && incoming_cargo_waiting("PASS") >= 6)) {1: switch_produce_oil_wells_boosted; produce_none;}

item (FEAT_INDUSTRIES, industry_oil_wells, 6)
{
	property {
		substitute: INDUSTRYTYPE_OIL_WELLS;
		name: string(STR_OIL_WELLS);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_OIL_WELLS));
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		layouts: [
			industry_layout_oil_wells_1,
			industry_layout_oil_wells_2,
		];
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("PIPE"),
			accept_cargo("ENSP"),
			produce_cargo("OIL_", 0)
		];
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 171;
	}
	graphics {
		produce_256_ticks: switch_produce_oil_wells;
		cargo_subtype_display: HideCargoWaitingText(0);
		//construction_probability: switch_unlock_oil_wells;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_OIL_WELLS_HELPTEXT);
	}
}
/* Begin Rum Distillery */

item (FEAT_INDUSTRYTILES, tile_rum_distillery_0)
{
	property {
		substitute: 39;
		override: 39;
		accepted_cargos: [[MOLS, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_rum_distillery_1)
{
	property {
		substitute: 40;
		override: 40;
		accepted_cargos: [[MOLS, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_rum_distillery_2)
{
	property {
		substitute: 41;
		override: 41;
		accepted_cargos: [[MOLS, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_rum_distillery_3)
{
	property {
		substitute: 42;
		override: 42;
		accepted_cargos: [[MOLS, 8], [PASS, 8]];
	}
}

produce (produce_rum_distillery,
	[PASS: 1; MOLS: 1;],	// Consume
	[BEER: 1;],				// Produce
	1 						// Run callback again
	)
	
switch (FEAT_INDUSTRIES, SELF, switch_produce_rum_distillery, (incoming_cargo_waiting("PASS") > 0 && incoming_cargo_waiting("MOLS") > 0)) {
	1: produce_rum_distillery;
	switch_produce_idle;
}

item (FEAT_INDUSTRIES, industry_rum_distillery, 11)
{
	property {
		substitute: INDUSTRYTYPE_TEMPERATE_FACTORY;
		name: string(STR_RUM_DISTILLERY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_RUM_DISTILLERY));
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("MOLS"),
			produce_cargo("BEER", 0)
		];
		prob_map_gen: 0;
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 61;
	}
	graphics {
		produce_cargo_arrival: switch_produce_rum_distillery;
		cargo_subtype_display: HideCargoWaitingText(0);
		extra_text_industry: string(STR_RUM_DISTILLERY_HELPTEXT);
		colour: founder_colour1;
	}
}
/* Begin Sugar Mill */

item (FEAT_INDUSTRYTILES, tile_sugar_mill_0)
{
	property {
		substitute: 60;
		override: 60;
		accepted_cargos: [[SGCN, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_sugar_mill_1)
{
	property {
		substitute: 61;
		override: 61;
		accepted_cargos: [[SGCN, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_sugar_mill_2)
{
	property {
		substitute: 62;
		override: 62;
		accepted_cargos: [[SGCN, 8], [PASS, 8]];
	}
}

item (FEAT_INDUSTRYTILES, tile_sugar_mill_3)
{
	property {
		substitute: 63;
		override: 63;
		accepted_cargos: [[SGCN, 8], [PASS, 8]];
	}
}

produce (produce_sugar_mill,
	[PASS: 8; SGCN: 8;],	// Consume
	[SUGR: 4; MOLS: 1;],	// Produce
	1 						// Run callback again
	)
	
switch (FEAT_INDUSTRIES, SELF, switch_produce_sugar_mill, (incoming_cargo_waiting("PASS") > 0 && incoming_cargo_waiting("SGCN") >= 8)) {
	1: produce_sugar_mill;
	switch_produce_idle;
}

item (FEAT_INDUSTRIES, industry_sugar_mill, 4)
{
	property {
		substitute: INDUSTRYTYPE_FOOD_PROCESSING_PLANT;
		name: string(STR_SUGAR_MILL);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_SUGAR_MILL));
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("SGCN"),
			produce_cargo("SUGR", 0),
			produce_cargo("MOLS", 0)
		];
		prob_map_gen: 0;
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 15;
	}
	graphics {
		produce_cargo_arrival: switch_produce_sugar_mill;
		cargo_subtype_display: HideCargoWaitingText(0);
		extra_text_industry: string(STR_SUGAR_MILL_HELPTEXT);
		colour: founder_colour1;
	}
}

/* Begin Sugarcane plantation */

/* Citrus groves only generate at elevation 1. */
switch (FEAT_INDUSTRIES, SELF, loc_check_sugarcane_plantation, IndustryElevationCheck(0, 1)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_SUGARCANE_LOCATION);}

/* Boosted production if Fertilizier is supplied */
produce (produce_sugarcane_plantation_boosted,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3); FERT: 3;],	// Consume
	[SGCN: 32;],													// Produce
	0 																// Don't run callback again
	)

/* Regular production uses at least 24 passengers/month, but will consume excess passengers so they don't build up */
produce (produce_sugarcane_plantation,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3);],	// Consume
	[SGCN: 16;],											// Produce
	0 														// Don't run callback again
	)

/* Check for Fertilizier for normal or boosted production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_sugarcane_plantation_boosted, incoming_cargo_waiting("FERT") >= 3) {1: produce_sugarcane_plantation_boosted; produce_sugarcane_plantation;}

/* Check for Workers for any production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_sugarcane_plantation, incoming_cargo_waiting("PASS") >= 3) {1: switch_produce_sugarcane_plantation_boosted; produce_none;}

item (FEAT_INDUSTRIES, industry_sugarcane_plantation, 3)
{
	property {
		substitute: INDUSTRYTYPE_TROPICAL_FARM;
		name: string(STR_SUGARCANE_PLANTATION);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_SUGARCANE_PLANTATION));
		life_type: IND_LIFE_TYPE_ORGANIC;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("FERT"),
			produce_cargo("SGCN", 0),
		];
		conflicting_ind_types: [industry_sugarcane_plantation, industry_citrus_grove, industry_coffee_plantation]; // FIXME: Add plantations which plant fields around them
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 94;
		prospect_chance: 1;
		
	}
	graphics {
		produce_256_ticks: switch_produce_sugarcane_plantation;
		cargo_subtype_display: HideCargoWaitingText(0);
		location_check: loc_check_sugarcane_plantation;
		/* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_PRIMARY_HELPTEXT);
	}
}


/* Begin Tobacco Plantation */

spritelayout tobacco_plantation_office_1 {
	ground {
		sprite: 2116;
	}
	building {
		sprite: 4450;
	}
}

spritelayout tobacco_plantation_office_2 {
	ground {
		sprite: 2116;
	}
	building {
		sprite: 4456;
	}
}

spritelayout tobacco_field {
	ground {
		sprite: 2341;
	}
}

random_switch (FEAT_INDUSTRYTILES, SELF, random_tobacco_plantation_office) {
	1: return tobacco_plantation_office_1;
	1: return tobacco_plantation_office_2;
}

item (FEAT_INDUSTRYTILES, ind_tile_tobacco_plantation) {
	property {
		substitute:				116;
		land_shape_flags:		bitmask(LSF_ONLY_ON_FLAT_LAND);
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: tobacco_field;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_tobacco_plantation_office) {
	property {
		substitute: 117;
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: random_tobacco_plantation_office;
	}
}

tilelayout tilelayout_tobacco_plantation_1 {
	0,0: ind_tile_tobacco_plantation;	0,1: ind_tile_tobacco_plantation;	0,2: ind_tile_tobacco_plantation;		0,4: ind_tile_tobacco_plantation;	0,5: ind_tile_tobacco_plantation;	0,6: ind_tile_tobacco_plantation;
	1,0: ind_tile_tobacco_plantation;	1,1: ind_tile_tobacco_plantation;	1,2: ind_tile_tobacco_plantation;		1,4: ind_tile_tobacco_plantation;	1,5: ind_tile_tobacco_plantation;	1,6: ind_tile_tobacco_plantation;
	2,0: ind_tile_tobacco_plantation;	2,1: ind_tile_tobacco_plantation;	2,2: ind_tile_tobacco_plantation;		2,4: ind_tile_tobacco_plantation;	2,5: ind_tile_tobacco_plantation;	2,6: ind_tile_tobacco_plantation;
	3,0: ind_tile_tobacco_plantation;	3,1: ind_tile_tobacco_plantation;	3,2: ind_tile_tobacco_plantation;		3,4: ind_tile_tobacco_plantation;	3,5: ind_tile_tobacco_plantation;	3,6: ind_tile_tobacco_plantation;
	4,0: ind_tile_tobacco_plantation;	4,1: ind_tile_tobacco_plantation;	4,2: ind_tile_tobacco_plantation;		4,4: ind_tile_tobacco_plantation;	4,5: ind_tile_tobacco_plantation;	4,6: ind_tile_tobacco_plantation;
	5,0: ind_tile_tobacco_plantation;	5,1: ind_tile_tobacco_plantation;	5,2: ind_tile_tobacco_plantation;		5,4: ind_tile_tobacco_plantation;	5,5: ind_tile_tobacco_plantation;	5,6: ind_tile_tobacco_plantation;
								6,1: ind_tile_tobacco_plantation_office;
}

tilelayout tilelayout_tobacco_plantation_2 {
	0,0: ind_tile_tobacco_plantation;	0,1: ind_tile_tobacco_plantation;	0,2: ind_tile_tobacco_plantation;	0,3: ind_tile_tobacco_plantation;	0,4: ind_tile_tobacco_plantation;	0,5: ind_tile_tobacco_plantation;
	1,0: ind_tile_tobacco_plantation;	1,1: ind_tile_tobacco_plantation;	1,2: ind_tile_tobacco_plantation;	1,3: ind_tile_tobacco_plantation;	1,4: ind_tile_tobacco_plantation;	1,5: ind_tile_tobacco_plantation;
	2,0: ind_tile_tobacco_plantation;	2,1: ind_tile_tobacco_plantation;	2,2: ind_tile_tobacco_plantation;	2,3: ind_tile_tobacco_plantation;	2,4: ind_tile_tobacco_plantation;	2,5: ind_tile_tobacco_plantation;
	3,0: ind_tile_tobacco_plantation;	3,1: ind_tile_tobacco_plantation;	3,2: ind_tile_tobacco_plantation;	3,3: ind_tile_tobacco_plantation;	3,4: ind_tile_tobacco_plantation;	3,5: ind_tile_tobacco_plantation;
	4,0: ind_tile_tobacco_plantation;	4,1: ind_tile_tobacco_plantation;	4,2: ind_tile_tobacco_plantation;	4,3: ind_tile_tobacco_plantation;	4,4: ind_tile_tobacco_plantation;	4,5: ind_tile_tobacco_plantation;
	5,0: ind_tile_tobacco_plantation;	5,1: ind_tile_tobacco_plantation;	5,2: ind_tile_tobacco_plantation;	5,3: ind_tile_tobacco_plantation;	5,4: ind_tile_tobacco_plantation;	5,5: ind_tile_tobacco_plantation;
																																					6,4: ind_tile_tobacco_plantation_office;
}

tilelayout tilelayout_tobacco_plantation_3 {
	0,0: ind_tile_tobacco_plantation;	0,1: ind_tile_tobacco_plantation;	0,2: ind_tile_tobacco_plantation;	0,3: ind_tile_tobacco_plantation;	0,4: ind_tile_tobacco_plantation;	0,5: ind_tile_tobacco_plantation;
	1,0: ind_tile_tobacco_plantation;	1,1: ind_tile_tobacco_plantation;	1,2: ind_tile_tobacco_plantation;	1,3: ind_tile_tobacco_plantation;	1,4: ind_tile_tobacco_plantation;	1,5: ind_tile_tobacco_plantation;
	2,0: ind_tile_tobacco_plantation;	2,1: ind_tile_tobacco_plantation;	2,2: ind_tile_tobacco_plantation;	2,3: ind_tile_tobacco_plantation;	2,4: ind_tile_tobacco_plantation;	2,5: ind_tile_tobacco_plantation;
	3,0: ind_tile_tobacco_plantation;	3,1: ind_tile_tobacco_plantation;	3,2: ind_tile_tobacco_plantation;	3,3: ind_tile_tobacco_plantation;	3,4: ind_tile_tobacco_plantation;	3,5: ind_tile_tobacco_plantation;
	4,0: ind_tile_tobacco_plantation;	4,1: ind_tile_tobacco_plantation;	4,2: ind_tile_tobacco_plantation;	4,3: ind_tile_tobacco_plantation;	4,4: ind_tile_tobacco_plantation;	4,5: ind_tile_tobacco_plantation;
	5,0: ind_tile_tobacco_plantation;	5,1: ind_tile_tobacco_plantation;	5,2: ind_tile_tobacco_plantation;	5,3: ind_tile_tobacco_plantation;	5,4: ind_tile_tobacco_plantation;	5,5: ind_tile_tobacco_plantation;
	6,0: ind_tile_tobacco_plantation_office;
}

tilelayout tilelayout_tobacco_plantation_4 {
	0,0: ind_tile_tobacco_plantation;	0,1: ind_tile_tobacco_plantation;	0,2: ind_tile_tobacco_plantation;	0,3: ind_tile_tobacco_plantation;
	1,0: ind_tile_tobacco_plantation;	1,1: ind_tile_tobacco_plantation;	1,2: ind_tile_tobacco_plantation;	1,3: ind_tile_tobacco_plantation;
	2,0: ind_tile_tobacco_plantation;	2,1: ind_tile_tobacco_plantation;	2,2: ind_tile_tobacco_plantation;	2,3: ind_tile_tobacco_plantation;
	3,0: ind_tile_tobacco_plantation;	3,1: ind_tile_tobacco_plantation;	3,2: ind_tile_tobacco_plantation;	3,3: ind_tile_tobacco_plantation;
	4,0: ind_tile_tobacco_plantation;	4,1: ind_tile_tobacco_plantation;	4,2: ind_tile_tobacco_plantation;	4,3: ind_tile_tobacco_plantation;
	5,0: ind_tile_tobacco_plantation;	5,1: ind_tile_tobacco_plantation;	5,2: ind_tile_tobacco_plantation;	5,3: ind_tile_tobacco_plantation;
								6,1: ind_tile_tobacco_plantation_office;
}

tilelayout tilelayout_tobacco_plantation_5 {
	0,0: ind_tile_tobacco_plantation;	0,1: ind_tile_tobacco_plantation;	0,2: ind_tile_tobacco_plantation;	0,3: ind_tile_tobacco_plantation;
	1,0: ind_tile_tobacco_plantation;	1,1: ind_tile_tobacco_plantation;	1,2: ind_tile_tobacco_plantation;	1,3: ind_tile_tobacco_plantation;
	2,0: ind_tile_tobacco_plantation;	2,1: ind_tile_tobacco_plantation;	2,2: ind_tile_tobacco_plantation;	2,3: ind_tile_tobacco_plantation; 2,4: ind_tile_tobacco_plantation_office;
	3,0: ind_tile_tobacco_plantation;	3,1: ind_tile_tobacco_plantation;	3,2: ind_tile_tobacco_plantation;	3,3: ind_tile_tobacco_plantation;
	4,0: ind_tile_tobacco_plantation;	4,1: ind_tile_tobacco_plantation;	4,2: ind_tile_tobacco_plantation;	4,3: ind_tile_tobacco_plantation;
	5,0: ind_tile_tobacco_plantation;	5,1: ind_tile_tobacco_plantation;	5,2: ind_tile_tobacco_plantation;	5,3: ind_tile_tobacco_plantation;
}

tilelayout tilelayout_tobacco_plantation_6 {
	0,0: ind_tile_tobacco_plantation;	0,1: ind_tile_tobacco_plantation;	0,2: ind_tile_tobacco_plantation;	0,3: ind_tile_tobacco_plantation;
	1,0: ind_tile_tobacco_plantation;	1,1: ind_tile_tobacco_plantation;	1,2: ind_tile_tobacco_plantation;	1,3: ind_tile_tobacco_plantation;
	2,0: ind_tile_tobacco_plantation;	2,1: ind_tile_tobacco_plantation;	2,2: ind_tile_tobacco_plantation;	2,3: ind_tile_tobacco_plantation;
	3,0: ind_tile_tobacco_plantation;	3,1: ind_tile_tobacco_plantation;	3,2: ind_tile_tobacco_plantation;	3,3: ind_tile_tobacco_plantation;
	4,0: ind_tile_tobacco_plantation;	4,1: ind_tile_tobacco_plantation;	4,2: ind_tile_tobacco_plantation;	4,3: ind_tile_tobacco_plantation; 4,4: ind_tile_tobacco_plantation_office;
	5,0: ind_tile_tobacco_plantation;	5,1: ind_tile_tobacco_plantation;	5,2: ind_tile_tobacco_plantation;	5,3: ind_tile_tobacco_plantation;
}

/* Tobacco Plantations only generate at elevation 1. */
switch (FEAT_INDUSTRIES, SELF, loc_check_tobacco_plantation, IndustryElevationCheck(0, 1)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_CITRUS_LOCATION);}

/* Boosted production if Fertilizier is supplied */
produce (produce_tobacco_plantation_boosted,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3); FERT: 3;],	// Consume
	[TBCO: 24;],													// Produce
	0 																// Don't run callback again
	)

/* Regular production uses at least 24 passengers/month, but will consume excess passengers so they don't build up */
produce (produce_tobacco_plantation,
	[PASS: max((incoming_cargo_waiting("PASS") / 8), 3);],	// Consume
	[TBCO: 12;],											// Produce
	0 														// Don't run callback again
	)

/* Check for Fertilizier for normal or boosted production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_tobacco_plantation_boosted, incoming_cargo_waiting("FERT") >= 3) {1: produce_tobacco_plantation_boosted; produce_tobacco_plantation;}

/* Check for Workers for any production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_tobacco_plantation, incoming_cargo_waiting("PASS") >= 3) {1: switch_produce_tobacco_plantation_boosted; produce_none;}

item (FEAT_INDUSTRIES, industry_tobacco_plantation, 12)
{
	property {
		substitute: INDUSTRYTYPE_FRUIT_PLANTATION;
		name: string(STR_TOBACCO_PLANTATION);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_TOBACCO_PLANTATION));
		life_type: IND_LIFE_TYPE_ORGANIC;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("FERT"),
			produce_cargo("TBCO", 0),
		];
		layouts: [
			tilelayout_tobacco_plantation_1,
			tilelayout_tobacco_plantation_2,
			tilelayout_tobacco_plantation_3,
			tilelayout_tobacco_plantation_4,
			tilelayout_tobacco_plantation_5,
			tilelayout_tobacco_plantation_6
		];
		conflicting_ind_types: [industry_tobacco_plantation, industry_sugarcane_plantation]; // FIXME: Add plantations which plant fields around them
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 57;
		prospect_chance: 1;
		
	}
	graphics {
		produce_256_ticks: switch_produce_tobacco_plantation;
		cargo_subtype_display: HideCargoWaitingText(0);
		location_check: loc_check_tobacco_plantation;
		/* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_PRIMARY_HELPTEXT);
	}
}
