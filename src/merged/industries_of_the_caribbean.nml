grf {
	grfid: "TT20";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	url: string(STR_WEBSITE);
	version: 0;
	min_compatible_version: 0;
}

/* Disable base game industries */
disable_item(FEAT_INDUSTRIES);

/* Disable base game cargos */
disable_item(FEAT_CARGOS);

/* Increase base costs for funding industries to 4x the base cost. This gives us a greater range of possible purchase prices for funding industries.
 * Note that this also increase the cost to fund a town, so we also decrement that by the same factor to leave it unchanged. 
 */
basecost {
	PR_BUILD_INDUSTRY: 2;
	PR_BUILD_TOWN: -2;
}

/* Create an error if OpenTTD version is before 1.10.0 (required for increased cargo types at industries) */
if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

/* Create an error if a conflicting industry replacement set is active - thanks to FIRS for much of this code */

if (grf_future_status("Meo\81")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "New Cargos"));}

if (grf_future_status("Meo\82")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "New Cargos Petrol + Tourists"));}

if (grf_future_status("\4D\65\6F\9D")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Houses"));}

if (grf_future_status("Meo\91")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Town Vector"));}

if (grf_future_status("Meo\92")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic Vector"));}

if (grf_future_status("\4D\65\6F\9F")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic vector II"));}

if (grf_future_status("Meo\93")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemical Vector"));}

if (grf_future_status("\4D\65\6F\9C")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemicals vector II"));}

if (grf_future_status("Meo\94")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Machinery Vector"));}

if (grf_future_status("Meo\95")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Wood Vector"));}

if (grf_future_status("Meo\96")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Construction Vector"));}

if (grf_future_status("Meo\97")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Agricultural Vector"));}

if (grf_future_status("Meo\98")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic for Arctic"));}

if (grf_future_status("Meo\99")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic for Tropic"));}

if (grf_future_status("Meo\9A")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Machinery for Tropic"));}

if (grf_future_status("Meo\9B")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Construction Vector by Pikkabird"));}

if (grf_future_status("Meo\9C")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemical Vector II"));}

if (grf_future_status("MCEe")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECSext"));}

if (grf_future_status("\4A\53\0A\70")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Industries Addon"));}

if (grf_future_status("SK\05\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\04")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\05")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("EX\01\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("EX\01\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("DD\06\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "UKRS Industries"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manual Industries"));}

if (grf_future_status("SLTU")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Tourist Set"));}

if (grf_future_status("SZ\13D")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Oil well decrease neutralizer"));}

if (grf_future_status("EH\01\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Experts hard industries"));}

if (grf_future_status("DD\06\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "UKRS Brick Chain"));}

if (grf_future_status("DD\06\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Pikka Basic Industries"));}

if (grf_future_status("mb\08\00")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "NewCargos by Michael Blunck"));}

if (grf_future_status("EELS")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Eels"));}

if (grf_future_status("EN\15\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Apollo Rocket Industry Set"));}

if (grf_future_status("\F1%\00\05")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 1"));}

if (grf_future_status("\F1%\00\06")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 2"));}

if (grf_future_status("\F1%\00\07")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 3"));}

if (grf_future_status("\F1%\00\08")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 4"));}

if (grf_future_status("MCF1")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIXES"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manual Industries II"));}

if (grf_future_status("McMi")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manpower Industries"));}

if (grf_future_status("\45\4E\31\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "North Korean Industry Set"));}

if (grf_future_status("\52\54\4E\41")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Representative UK Train Set - Extended"));}

if (grf_future_status("\44\44\01\10")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Town and Industry - Basic Industries"));}

if (grf_future_status("\41\4C\01\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "station's name from nearby industries"));}

if (grf_future_status("\6A\54\72\83")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wannaroo Basic Industries"));}

if (grf_future_status("\6A\64\72\04")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wannaroo Extra Industries"));}

if (grf_future_status("\56\45\03\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "YETI Extended Towns and Industries"));}

if (grf_future_status("\4E\4D\11\13")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "North American Industry Set (NAIS)"));}

if (grf_future_status("\4A\44\88\07")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "XIS Extreme Industry Set"));}

if (grf_future_status("AZ\20\77")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wasteland"));}

if (grf_future_status("GGQT")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "One Tile Industry Set"));}

if (grf_future_status("TT\04\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Improved Town Industries"));}


/* Begin Functions */

/**
 * Check if an industry is within a range of elevation.
 * @param min_z elevation (inclusive)
 * @param max_z elevation (inclusive)
 * @return 1 if the industry is at or between the specified min and max elevations, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IndustryElevationCheck, min_z, max_z, nearby_tile_height(0,0) >= min_z && nearby_tile_height(0,0) <= max_z) {return;}

/* Begin Cargos */

cargotable {
	/* Town/passenger cargos */
	PASS, MAIL, TOUR,
	
	/* Primary products */
	JAVA, FRUT, SGCN, TBCO, WOOD, OIL_, NKOR,
	
	/* Secondary products */
	SUGR, MOLS, CIGR, BEER, FOOD, CHEM, RFPR, FUEL, NICK, COBL, PIPE
}

// Replace passengers, keep original ID. Use cargo label "PASS" to avoid breaking vehicle refits.
item (FEAT_CARGOS, cargo_workers, 0x00) {
	property {
		number:						0x00;
		sprite:						4297;
		type_name:					string(STR_CARGO_NAME_WORKERS);
		unit_name:					string(STR_CARGO_SINGULAR_WORKERS);
		type_abbreviation:			string(STR_CARGO_ABBREV_WORKERS);
		weight:						0.0625;
		is_freight:					0;
		cargo_classes:				bitmask(CC_PASSENGERS);
		cargo_label:				"PASS";
		town_growth_effect:			TOWNGROWTH_PASSENGERS;
		town_growth_multiplier:		1.0;
		units_of_cargo:				string(STR_CARGO_QUANTITY_WORKERS);
		items_of_cargo:				string(STR_CARGO_QUANTITY_WORKERS);
		penalty_lowerbound:			10;
		single_penalty_length:		24;
		price_factor:				105;
		capacity_multiplier:		4;
		station_list_colour:		152;
		cargo_payment_list_colour:	152;
	}
}

// Uses Coal ID
item (FEAT_CARGOS, cargo_tourists, 0x01) {
	property {
		number:						0x01;
		sprite:						4297;
		type_name:					string(STR_CARGO_NAME_TOURISTS);
		unit_name:					string(STR_CARGO_SINGULAR_TOURISTS);
		type_abbreviation:			string(STR_CARGO_ABBREV_TOURISTS);
		weight:						0.0625;
		is_freight:					0;
		cargo_classes:				bitmask(CC_PASSENGERS);
		cargo_label:				"TOUR";
		town_growth_effect:			TOWNGROWTH_PASSENGERS;
		town_growth_multiplier:		1.0;
		units_of_cargo:				string(STR_CARGO_QUANTITY_TOURISTS);
		items_of_cargo:				string(STR_CARGO_QUANTITY_TOURISTS);
		penalty_lowerbound:			10;
		single_penalty_length:		24;
		price_factor:				175;
		capacity_multiplier:		4;
		station_list_colour:		176;
		cargo_payment_list_colour:	176;
	}
}

// Original ID, required for house compatibility.
item (FEAT_CARGOS, cargo_mail, 0x02) {
	property {
		number:						0x02;
		sprite:						4299;
		type_name:					TTD_STR_CARGO_PLURAL_MAIL;
		unit_name:					TTD_STR_CARGO_SINGULAR_MAIL;
		type_abbreviation:			TTD_STR_ABBREV_MAIL;
		weight:						0.25;
		is_freight:					0;
		cargo_classes:				bitmask(CC_MAIL);
		cargo_label:				"MAIL";
		town_growth_effect:			TOWNGROWTH_MAIL;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_BAGS;
		items_of_cargo:				TTD_STR_QUANTITY_MAIL;
		penalty_lowerbound:			6;
		single_penalty_length:		24;
		price_factor:				167;
		capacity_multiplier:		2;
		station_list_colour:		23;
		cargo_payment_list_colour:	23;	
	}
}

// Uses Oil ID
item (FEAT_CARGOS, cargo_coffee, 0x03) {
	property {
		number:						0x03;
		sprite:						4308;
		type_name:					string(STR_CARGO_NAME_COFFEE);
		unit_name:					string(STR_CARGO_NAME_COFFEE);
		type_abbreviation:			string(STR_CARGO_ABBREV_COFFEE);
		weight:						0.25;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS);
		cargo_label:				"JAVA";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_COFFEE);
		penalty_lowerbound:			16;
		single_penalty_length:		64;
		capacity_multiplier:		1;
		price_factor:				173;
		station_list_colour:		63;
		cargo_payment_list_colour:	63;
	}
}

// Uses Livestock ID
item (FEAT_CARGOS, cargo_citrus, 0x04) {
	property {
		number:						0x04;
		sprite:						4308;
		type_name:					string(STR_CARGO_NAME_CITRUS);
		unit_name:					string(STR_CARGO_NAME_CITRUS);
		type_abbreviation:			string(STR_CARGO_ABBREV_CITRUS);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
		cargo_label:				"FRUT";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_CITRUS);
		penalty_lowerbound:			16;
		single_penalty_length:		64;
		capacity_multiplier:		1;
		price_factor:				124;
		station_list_colour:		188;
		cargo_payment_list_colour:	188;
	}
}

// Rum uses Goods ID for cargo acceptance with old houses. ITL houses do not accept rum -- it must be exported.
item (FEAT_CARGOS, cargo_rum, 0x05) {
	property {
		number:						0x05;
		sprite:						4317;
		type_name:					string(STR_CARGO_NAME_RUM);
		unit_name:					string(STR_CARGO_NAME_RUM);
		type_abbreviation:			string(STR_CARGO_ABBREV_RUM);
		weight:						0.5;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS);
		cargo_label:				"BEER";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_RUM);
		penalty_lowerbound:			9;
		single_penalty_length:		36;
		price_factor:				166;
		capacity_multiplier:		1;
		station_list_colour:		61;
		cargo_payment_list_colour:	61;
	}
}

// Sugarcane in 0x06 Grain
item (FEAT_CARGOS, cargo_sugarcane, 0x06) {
	property {
		number:						0x06;
		sprite:						4309;
		type_name:					string(STR_CARGO_NAME_SUGARCANE);
		unit_name:					string(STR_CARGO_NAME_SUGARCANE);
		type_abbreviation:			string(STR_CARGO_ABBREV_SUGARCANE);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK, CC_NON_POURABLE);
		cargo_label:				"SGCN";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_SUGARCANE);
		penalty_lowerbound:			5;
		single_penalty_length:		30;
		price_factor:				99;
		capacity_multiplier:		1;
		station_list_colour:		94;
		cargo_payment_list_colour:	94;
	}
}

// Sugar in 0x07 Wood
item (FEAT_CARGOS, cargo_sugar, 0x07) {
	property {
		number:						0x07;
		sprite:						4316;
		type_name:					TTD_STR_CARGO_PLURAL_SUGAR;
		unit_name:					TTD_STR_CARGO_SINGULAR_SUGAR;
		type_abbreviation:			TTD_STR_ABBREV_SUGAR;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK, CC_COVERED);
		cargo_label:				"SUGR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_SUGAR;
		penalty_lowerbound:			16;
		single_penalty_length:		64;
		price_factor:				102;
		capacity_multiplier:		1;
		station_list_colour:		15;
		cargo_payment_list_colour:	15;
	}
}

// Tobacco in 0x08 Iron Ore
item (FEAT_CARGOS, cargo_tobacco, 0x08) {
	property {
		number:						0x08;
		sprite:						4309;
		type_name:					string(STR_CARGO_NAME_TOBACCO);
		unit_name:					string(STR_CARGO_NAME_TOBACCO);
		type_abbreviation:			string(STR_CARGO_ABBREV_TOBACCO);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK, CC_NON_POURABLE);
		cargo_label:				"TBCO";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		items_of_cargo:				string(STR_CARGO_QUANTITY_TOBACCO);
		units_of_cargo:				TTD_STR_TONS;
		penalty_lowerbound:			5;
		single_penalty_length:		30;
		price_factor:				116;
		capacity_multiplier:		1;
		station_list_colour:		57;
		cargo_payment_list_colour:	57;
	}
}

// Wood in 0x09 Steel
item (FEAT_CARGOS, cargo_wood, 0x09) {
	property {
		number:						0x09;
		sprite:						4304;
		type_name:					TTD_STR_CARGO_PLURAL_WOOD;
		unit_name:					TTD_STR_CARGO_SINGULAR_WOOD;
		type_abbreviation:			TTD_STR_ABBREV_WOOD;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"WOOD";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_WOOD;
		penalty_lowerbound:			40;
		single_penalty_length:		255;
		price_factor:				104;
		capacity_multiplier:		1;
		station_list_colour:		85;
		cargo_payment_list_colour:	85;
	}
}

// Molasses in 0x0A Diamonds
item (FEAT_CARGOS, cargo_molasses, 0x0A) {
	property {
		number:						0x0A;
		sprite:						4300;
		type_name:					string(STR_CARGO_NAME_MOLASSES);
		unit_name:					string(STR_CARGO_NAME_MOLASSES);
		type_abbreviation:			string(STR_CARGO_ABBREV_MOLASSES);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"MOLS";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_MOLASSES);
		penalty_lowerbound:			40;
		single_penalty_length:		255;
		price_factor:				96;
		capacity_multiplier:		1;
		station_list_colour:		106;
		cargo_payment_list_colour:	106;
	}
}

// Cigars in 0x0B Paper
item (FEAT_CARGOS, cargo_cigars, 0x0B) {
	property {
		number:						0x0B;
		sprite:						4317;
		type_name:					string(STR_CARGO_NAME_CIGARS);
		unit_name:					string(STR_CARGO_NAME_CIGARS);
		type_abbreviation:			string(STR_CARGO_ABBREV_CIGARS);
		weight:						0.5;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS, CC_PIECE_GOODS);
		cargo_label:				"CIGR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_CIGARS);
		penalty_lowerbound:			10;
		single_penalty_length:		56;
		price_factor:				163;
		capacity_multiplier:		1;
		station_list_colour:		36;
		cargo_payment_list_colour:	36;
	}
}

// Original ID, required for compatibility with older NewGRF house sets which hard-code cargo acceptance to cargo IDs rather than "FOOD"
item (FEAT_CARGOS, cargo_food, 0x0C) {
	property {
		number:						0x0C;
		sprite:						4312;
		type_name:					TTD_STR_CARGO_PLURAL_FOOD;
		unit_name:					TTD_STR_CARGO_SINGULAR_FOOD;
		type_abbreviation:			TTD_STR_ABBREV_FOOD;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_REFRIGERATED, CC_EXPRESS);
		cargo_label:				"FOOD";
		town_growth_effect:			TOWNGROWTH_FOOD;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_FOOD;
		penalty_lowerbound:			0;
		single_penalty_length:		24;
		price_factor:				158;
		capacity_multiplier:		1;
		station_list_colour:		48;
		cargo_payment_list_colour:	48;
	}
}

// Oil in 0X0D Fruit
item (FEAT_CARGOS, cargo_oil, 0x0D) {
	property {
		number:						0x0D;
		sprite:						4300;
		type_name:					TTD_STR_CARGO_PLURAL_OIL;
		unit_name:					TTD_STR_CARGO_SINGULAR_OIL;
		type_abbreviation:			TTD_STR_ABBREV_OIL;
		weight:						0.9;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"OIL_";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				TTD_STR_QUANTITY_OIL;
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		station_list_colour:		171;
		cargo_payment_list_colour:	171;
		price_factor:				101;
		capacity_multiplier:		1;		
	}
}

// Fuel in 0x0E Copper Ore
item (FEAT_CARGOS, cargo_fuel, 0x0E) {
	property {
		number:						0x0E;
		sprite:						4300;
		type_name:					string(STR_CARGO_NAME_FUEL);
		unit_name:					string(STR_CARGO_NAME_FUEL);
		type_abbreviation:			string(STR_CARGO_ABBREV_FUEL);
		weight:						0.8;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"FUEL";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_FUEL);
		penalty_lowerbound:			32;
		single_penalty_length:		44;
		price_factor:				120;
		capacity_multiplier:		1;
		station_list_colour:		173;
		cargo_payment_list_colour:	173;
	}
}

// Chemicals in 0x0F Water
item (FEAT_CARGOS, cargo_chemicals, 0x0F) {
	property {
		number:						0x0F;
		sprite:						4314;
		type_name:					string(STR_CARGO_NAME_CHEMICALS);
		unit_name:					string(STR_CARGO_NAME_CHEMICALS);
		type_abbreviation:			string(STR_CARGO_ABBREV_CHEMICALS);
		weight:						1.2;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID, CC_POWDERIZED);
		cargo_label:				"RFPR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_CHEMICALS);
		penalty_lowerbound:			20;
		single_penalty_length:		255;
		price_factor:				115;
		capacity_multiplier:		1;
		station_list_colour:		175;
		cargo_payment_list_colour:	175;		
	}
}

// Pipe in 0x10 Rubber
item (FEAT_CARGOS, cargo_pipe, 0x10) {
	property {
		number:						0x10;
		sprite:						4306;
		type_name:					string(STR_CARGO_NAME_PIPE);
		unit_name:					string(STR_CARGO_NAME_PIPE);
		type_abbreviation:			string(STR_CARGO_ABBREV_PIPE);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"PIPE";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_PIPE);
		penalty_lowerbound:			30;
		single_penalty_length:		42;
		price_factor:				144;
		capacity_multiplier:		1;
		station_list_colour:		132;
		cargo_payment_list_colour:	132;
	}
}

// Nickel Ore in 0x11 Sugar
item (FEAT_CARGOS, cargo_nickel_ore, 0x11) {
	property {
		number:						0x11;
		sprite:						4298;
		type_name:					string(STR_CARGO_NAME_NICKEL_ORE);
		unit_name:					string(STR_CARGO_NAME_NICKEL_ORE);
		type_abbreviation:			string(STR_CARGO_ABBREV_NICKEL_ORE);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK);
		cargo_label:				"NKOR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_NICKEL_ORE);
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		price_factor:				89;
		capacity_multiplier:		1;
		station_list_colour:		8;
		cargo_payment_list_colour:	8;
	}
}

// Nickel in 0x12 Toys
item (FEAT_CARGOS, cargo_nickel, 0x12) {
	property {
		number:						0x12;
		sprite:						4306;
		type_name:					string(STR_CARGO_NAME_NICKEL);
		unit_name:					string(STR_CARGO_NAME_NICKEL);
		type_abbreviation:			string(STR_CARGO_ABBREV_NICKEL);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"NICK";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_NICKEL);
		penalty_lowerbound:			15;
		single_penalty_length:		255;
		price_factor:				141;
		capacity_multiplier:		1;
		station_list_colour:		11;
		cargo_payment_list_colour:	11;
	}
}

// Cobalt in 0x13 Batteries
item (FEAT_CARGOS, cargo_cobalt, 0x13) {
	property {
		number:						0x13;
		sprite:						4311;
		type_name:					string(STR_CARGO_NAME_COBALT);
		unit_name:					string(STR_CARGO_NAME_COBALT);
		type_abbreviation:			string(STR_CARGO_ABBREV_COBALT);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"COBL";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_COBALT);
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		price_factor:				162;
		capacity_multiplier:		1;
		station_list_colour:		158;
		cargo_payment_list_colour:	158;
	}
}

/* Begin Coffee Plantation */

/* Coffee plantations must be at least height 2, no max limit. */
switch (FEAT_INDUSTRIES, SELF, loc_check_coffee_plantation, IndustryElevationCheck(2, 255)) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_COFFEE_ELEVATION);}

item (FEAT_INDUSTRIES, industry_coffee_plantation, 0)
{
	property {
		substitute: INDUSTRYTYPE_RUBBER_PLANTATION; // ID: 13h
		name: string(STR_COFFEE_PLANTATION);
		nearby_station_name: string(STR_COFFEE_PLANTATION);
		life_type: IND_LIFE_TYPE_ORGANIC;
		cargo_types: [
			produce_cargo("JAVA", 4),
		];
		conflicting_ind_types: [industry_coffee_plantation]; // FIXME: Add plantations which plant fields around them
		prob_map_gen: 1; // FIXME: Adjust as necessary
		prob_in_game: 0;
		map_colour: 63;
		prospect_chance: 1;
		
	}
	graphics {
		location_check: loc_check_coffee_plantation;
		/* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_NO_PRODUCTION_CHANGE);
	}
}