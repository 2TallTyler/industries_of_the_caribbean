/* Begin Hotel */

spritelayout sprite_hotel_n {
	ground {
		sprite: 1420;
	}
	building {
		sprite: construction_state==0 ? 4471 : construction_state==3 ? 4475 : 4473;
	}
}

spritelayout sprite_hotel_e {
	ground {
		sprite: 1420;
	}
	building {
		sprite: construction_state==0 ? 4472 : construction_state==3 ? 4476 : 4474;
	}
}

item (FEAT_INDUSTRYTILES, tile_hotel_n)
{
	property {
		substitute: 0;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: sprite_hotel_n;
	}
}

item (FEAT_INDUSTRYTILES, tile_hotel_e)
{
	property {
		substitute: 0;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: sprite_hotel_e;
	}
}

tilelayout tilelayout_hotel_square {
	0,0: tile_hotel_n;	0,1: tile_hotel_e;
	1,0: tile_hotel_n;	1,1: tile_hotel_e;
}

/* Boosted production if Rum is supplied */
produce (produce_hotel_boosted,
	[FOOD: 6; BEER: 6;],    // Consume
	[TOUR: 48;],            // Produce
	0                       // Don't run callback again
	)

/* Regular production */
produce (produce_hotel,
	[FOOD: 6;],     // Consume
	[TOUR: 24;],    // Produce
	0               // Don't run callback again
	)

/* Check for Rum for normal or boosted production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_hotel_boosted, incoming_cargo_waiting("BEER") >= 6) {1: produce_hotel_boosted; produce_hotel;}

/* Check for Food for any production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_hotel, (incoming_cargo_waiting("FOOD") >= 6)) {1: switch_produce_hotel_boosted; switch_produce_idle;}

/* Location check: Hotels must replace houses in a town with population at least 1,200. Limit one per town. 
 * NOTE: Check to replace houses is via spec_flags, not the location_check callback. 
*/
switch (FEAT_INDUSTRIES, SELF, loc_check_hotel, (IsUniqueInTown(14) && TownHasPopulation(1200))) {1: return CB_RESULT_LOCATION_ALLOW; return string(STR_ERR_HOTEL_LOCATION);}

item (FEAT_INDUSTRIES, industry_hotel, 14)
{
	property {
		substitute: INDUSTRYTYPE_POWER_PLANT;
		name: string(STR_HOTEL);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_HOTEL));
		life_type: IND_LIFE_TYPE_PROCESSING;
		spec_flags: bitmask(IND_FLAG_ONLY_IN_LARGE_TOWNS, IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION);
		layouts: [
			tilelayout_hotel_square,
		];
		cargo_types: [
			accept_cargo("FOOD"),
			accept_cargo("BEER"),
			produce_cargo("TOUR", 0),
		];
		prob_map_gen: 5;
		prob_in_game: 5;
		fund_cost_multiplier: 5;
		map_colour: 176;
	}
	graphics {
		produce_256_ticks: switch_produce_hotel;
		location_check: loc_check_hotel;
		/* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_HOTEL_HELPTEXT);
		extra_text_fund: string(STR_HOTEL_FUNDTEXT);
	}
}