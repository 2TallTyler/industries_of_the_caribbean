/* Begin Nickel Smelter */

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_0)
{
	property {
		substitute: 52;
		override: 52;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_1)
{
	property {
		substitute: 53;
		override: 53;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_2)
{
	property {
		substitute: 54;
		override: 54;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_3)
{
	property {
		substitute: 55;
		override: 55;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_4)
{
	property {
		substitute: 56;
		override: 56;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, tile_nickel_smelter_5)
{
	property {
		substitute: 57;
		override: 57;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

produce (produce_nickel_smelter,
	[PASS: 4; NKOR: 4; RFPR: 1;],	// Consume
	[NICK: 4;],						// Produce
	1 								// Run callback again
	)

/* Consume extra Chemicals */
produce (produce_nickel_smelter_chemicals_stockpile,
	[RFPR: 1;],               // Consume
	[],                       // Produce
	1                         // Run callback again
	)

/* Should we consume extra Chemicals? */
switch (FEAT_INDUSTRIES, SELF, switch_nickel_smelter_stockpile_chemicals, incoming_cargo_waiting("RFPR") > 4096) {
	1: produce_nickel_smelter_chemicals_stockpile;
	produce_none;
}

/* Consume extra Nickel Ore */
produce (produce_nickel_smelter_nickel_ore_stockpile,
	[NKOR: 1;],               // Consume
	[],                       // Produce
	1                         // Run callback again
	)

/* Should we consume extra Nickel Ore? */
switch (FEAT_INDUSTRIES, SELF, switch_nickel_smelter_stockpile_nickel_ore, incoming_cargo_waiting("NKOR") > 4096) {
	1: produce_nickel_smelter_nickel_ore_stockpile;
	switch_nickel_smelter_stockpile_chemicals;
}

switch (FEAT_INDUSTRIES, SELF, switch_produce_nickel_smelter, (incoming_cargo_waiting("PASS") >= 4 && incoming_cargo_waiting("NKOR") >= 4 && incoming_cargo_waiting("RFPR") > 0)) {
	1: produce_nickel_smelter;
	switch_nickel_smelter_stockpile_nickel_ore;
}

/* Construction check */
switch (FEAT_INDUSTRIES, SELF, loc_check_nickel_smelter, IsBeingFunded() || (!param_primary_only && IsNearTown() && TownHasSecondaryPopulation() && AvoidIndustryType(industry_nickel_smelter, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRIES, industry_nickel_smelter, 7)
{
	property {
		substitute: INDUSTRYTYPE_STEEL_MILL;
		name: string(STR_NICKEL_SMELTER);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NICKEL_SMELTER));
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("NKOR"),
			accept_cargo("RFPR"),
			produce_cargo("NICK", 0)
		];
		prob_map_gen: (param_primary_only) ? 0 : 1;
		prob_in_game: 0;
		fund_cost_multiplier: 5;
		map_colour: 11;
	}
	graphics {
		location_check: loc_check_nickel_smelter;
		produce_256_ticks: switch_produce_idle;
		produce_cargo_arrival: switch_produce_nickel_smelter;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry: string(STR_NICKEL_SMELTER_HELPTEXT);
		extra_text_fund: string(STR_NICKEL_SMELTER_FUNDTEXT);
		colour: founder_colour1;
	}
}