
/* Begin Functions */

/**
 * Check if an industry is within a range of elevation.
 * @param min_z elevation (inclusive)
 * @param max_z elevation (inclusive)
 * @return 1 if the industry is at or between the specified min and max elevations, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IndustryElevationCheck, min_z, max_z, nearby_tile_height(0,0) >= min_z && nearby_tile_height(0,0) <= max_z) {return;}

/**
 * Check if a water-based industry is near land, or a land-based industry is near water
 * @param required distance from land/water
 * @return 1 if the industry is greater than the given distance from land/water, else 0
 */
switch (FEAT_INDUSTRIES, SELF, DistanceFromWaterOrLand, required, water_distance >= required) {return;}

/**
 * Calculate the x coordinate of an industry's northernmost tile.
 * @returns the x coordinate
 */ 
switch (FEAT_INDUSTRIES, SELF, GetTileX, var[0x80, 0, 0xFFFFFFFF] % map_x_edge) {return;}

/**
 * Calculate the y coordinate of an industry's northernmost tile.
 * @returns the y coordinate
 */
switch (FEAT_INDUSTRIES, SELF, GetTileY, var[0x80, 0, 0xFFFFFFFF] / map_x_edge) {return;}
 
/**
 * Checks if an industry is suitably close to the edge of the map
 * @returns 1 if it is close enouugh, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IsNearMapEdge, 
	(GetTileX() < 4) ||
	((map_x_edge - GetTileX()) < 8) ||
	(GetTileY() < 4) ||
	((map_y_edge - GetTileY()) < 8)
) {return;}

/**
 * Checks if an industry is being funded 
 * @returns 1 if so, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IsFundedConstruction, extra_callback_info2 == IND_CREATION_FUND) {return;}

/**
 * Hides the cargo waiting text for the selected cargo number
 * @returns a special string which hides the cargo waiting text for the proper cargo number, else does nothing
 */
 switch (FEAT_INDUSTRIES, SELF, HideCargoWaitingText, cargonum, getbits(extra_callback_info2, 0, 8) == cargonum) {
	1: return 0x3800 + string(STR_EMPTY); // per FIRS source, hides the cargo waiting text
	return CB_RESULT_NO_TEXT;
}